import "master.del";

define setHeroPassiveText(Player player) {
    if (HeroOf(player) == Hero.Ana) {
        heroPassiveText = heroPassives.Ana;
    } else if (HeroOf(player) == Hero.Ashe) {
        heroPassiveText = heroPassives.Ashe;
    } else if (HeroOf(player) == Hero.Baptiste) {
        heroPassiveText = heroPassives.Baptiste;
    } else if (HeroOf(player) == Hero.Bastion) {
        heroPassiveText = heroPassives.Bastion;
    } else if (HeroOf(player) == Hero.Brigitte) {
        heroPassiveText = heroPassives.Brigitte;
    } else if (HeroOf(player) == Hero.Doomfist) {
        heroPassiveText = heroPassives.Doomfist;
    } else if (HeroOf(player) == Hero.Dva) {
        heroPassiveText = heroPassives.Dva;
    } else if (HeroOf(player) == Hero.Echo) {
        heroPassiveText = heroPassives.Echo;
    } else if (HeroOf(player) == Hero.Genji) {
        heroPassiveText = heroPassives.Genji;
    }  else if (HeroOf(player) == Hero.Hanzo) {
        heroPassiveText = heroPassives.Hanzo;
    } else if (HeroOf(player) == Hero.Junkrat) {
        heroPassiveText = heroPassives.Junkrat;
    } else if (HeroOf(player) == Hero.Lucio) {
        heroPassiveText = heroPassives.Lucio;
    } else if (HeroOf(player) == Hero.Mccree) {
        heroPassiveText = heroPassives.Mccree;
    } else if (HeroOf(player) == Hero.Mei) {
        heroPassiveText = heroPassives.Mei;
    } else if (HeroOf(player) == Hero.Mercy) {
        heroPassiveText = heroPassives.Mercy;
    } else if (HeroOf(player) == Hero.Moira) {
        heroPassiveText = heroPassives.Moira;
    } else if (HeroOf(player) == Hero.Orisa) {
        heroPassiveText = heroPassives.Orisa;
    } else if (HeroOf(player) == Hero.Pharah) {
        heroPassiveText = heroPassives.Pharah;
    } else if (HeroOf(player) == Hero.Reaper) {
        heroPassiveText = heroPassives.Reaper;
    } else if (HeroOf(player) == Hero.Reinhardt) {
        heroPassiveText = heroPassives.Reinhardt;
    } else if (HeroOf(player) == Hero.Roadhog) {
        heroPassiveText = heroPassives.Roadhog;
    } else if (HeroOf(player) == Hero.Sigma) {
        heroPassiveText = heroPassives.Sigma;
    } else if (HeroOf(player) == Hero.Soldier76) {
        heroPassiveText = heroPassives.Soldier76;
    } else if (HeroOf(player) == Hero.Sombra) {
        heroPassiveText = heroPassives.Sombra;
    } else if (HeroOf(player) == Hero.Symmetra) {
        heroPassiveText = heroPassives.Symmetra;
    } else if (HeroOf(player) == Hero.Torbjorn) {
        heroPassiveText = heroPassives.Torbjorn;
    } else if (HeroOf(player) == Hero.Tracer) {
        heroPassiveText = heroPassives.Tracer;
    } else if (HeroOf(player) == Hero.Widowmaker) {
        heroPassiveText = heroPassives.Widowmaker;
    } else if (HeroOf(player) == Hero.Winston) {
        heroPassiveText = heroPassives.Winston;
    } else if (HeroOf(player) == Hero.WreckingBall) {
        heroPassiveText = heroPassives.WreckingBall;
    } else if (HeroOf(player) == Hero.Zarya) {
        heroPassiveText = heroPassives.Zarya;
    } else if (HeroOf(player) == Hero.Zenyatta) {
        heroPassiveText = heroPassives.Zenyatta;
    }

    return null;
}

enum heroPassives {
    Ana = "Biotic grenade stuns enemies for 4 seconds", // Implemented
    Ashe = "You deal 20% additional damage to targets who are burning, critical hits ignite enemies", // Implemented
    Baptiste = "Immortality Field cannot be destroyed by enemies, regen burst damages and displaces nearby enemies", // Implemented
    Bastion = "Move significantly faster while repairing yourself",
    Brigitte = "Damaging enemies reduces whipshot's cooldown, whipshot knocks over and pulls enemies", // Implemented
    Doomfist = "Damaging an enemy with your abilities or melee refills your handcannon", // Implemented
    Dva = "Damaging enemies reduces your boosters' cooldown", // Implemented
    Echo = "Taking flight stuns nearby enemies, sticky bomb eliminations refresh sticky bombs", // Implemented
    Genji = "Sword hits stun enemies, sword final blows detonate targets, deflect deals 500% more damage", // Implemented
    Hanzo = "Sonic arrow stuns enemies, critical kills refresh your sonic arrow", // Implemented
    Junkrat = "Deal significantly more knockback to enemies", // Implemented
    Lucio = "Soundwave deals 800% bonus damage and knocks enemies farther back", // Implemented
    Mccree = "Killing an enemy with a critical blow refreshes your combat roll",
    Mei = "Icicles breifly freeze enemies", // Implemented
    Mercy = "Guardian Angel can be activated without a targeted teamate to give a small directional boost", // Implemented
    Moira = "Biotic orb, melee, and ultimate final blows create explosions", // Implemented
    Orisa = "Fortifying adds 100 rounds to your fusion driver and increases movement speed",
    Pharah = "Take decreased damage while airborne, final blows refund a rocket",
    Reaper = "Meleeing in the direction of an enemy pulls them towards you", // Implemented
    Reinhardt = "Hammer hits lower firestrike's cooldown, Charge knocks down enemies and can be canceled, charge final blows reset charge",
    Roadhog = "Landing hooks greatly reduces its cooldown and refunds 1 ammo, final blows slightly reduce your hook's cooldown", // Implemented
    Sigma = "Launching hypersphere pulls enemies towards your crosshair, hyperspheres stun enemies", // Implemented
    Soldier76 = "Sprinting into enemies knocks them backwards and very briefly stuns them", // Implemented
    Sombra = "Hacked enemies are disabled", // Implemented
    Symmetra = "Turrets cannot be damaged by enemies", // Implemented
    Torbjorn = "Your turret cannot be damaged by enemies, deal 200% damage with your hammer while overloaded",
    Tracer = "Blinking stuns nearby enemies and reloads pulse pistols", // Implemented
    Widowmaker = "Eliminating enemies refills your magazine, headshots briefly stun enemies",
    Winston = "Being surrounded by 3 or more enemies increases your damage",
    WreckingBall = "Eliminating enemies refreshes piledriver",
    Zarya = "Taking damage reduces the cooldown of personal barrier",
    Zenyatta = "While using trancendence, nearby enemies catch on fire and take significant damge over time"
}

rule: "Hero Abilities - Dealt Damage"
Event.OnDamageDealt Team.Team1 {
    if (HeroOf(EventPlayer()) == Hero.Ana && EventAbility() == Button.Ability2) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 4);
    
    } else if (HeroOf(EventPlayer()) == Hero.Ashe && HasStatus(Victim(), Status.Burning)) {
        Damage(Victim(), EventPlayer(), EventDamage()*0.2);
   
    } else if (HeroOf(EventPlayer()) == Hero.Bastion) {
        Heal(Victim(), EventPlayer(), EventDamage()*0.25);

    } else if (HeroOf(EventPlayer()) == Hero.Brigitte) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-1);
        if (EventAbility() == Button.Ability1) {
            SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 1);
            ApplyImpulse(Victim(), DirectionTowards(Victim(), EventPlayer()) + Vector(0, 0.25, 0), 7, Relative.ToWorld, ContraryMotion.Cancel);
        }
  
    } else if (HeroOf(EventPlayer()) == Hero.Doomfist && EventAbility() != Button.PrimaryFire) {
        SetAmmo(EventPlayer(), 0, 4);
    
    } else if (HeroOf(EventPlayer()) == Hero.Dva) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-0.5);

    } else if (HeroOf(EventPlayer()) == Hero.Genji) {
        if (EventAbility() == Button.Ability1 || EventAbility() == Button.Melee || EventAbility() == Button.Ultimate) {
            SetStatus(Victim(), EventPlayer(), Status.Stunned, 2);
        } else if (IsUsingAbility2(EventPlayer()) && EventAbility() != null) {
            Damage(Victim(), EventPlayer(), EventDamage()*4);
        }


    } else if (HeroOf(EventPlayer()) == Hero.Hanzo && EventAbility() == Button.Ability1) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 2);
 
    } else if (HeroOf(EventPlayer()) == Hero.Lucio && EventAbility() == Button.SecondaryFire) {
        Damage(Victim(), EventPlayer(), EventDamage()*8);
    
   
    } else if (HeroOf(EventPlayer()) == Hero.Mei && EventAbility() == Button.SecondaryFire) {
        SetStatus(Victim(), EventPlayer(), Status.Frozen, 0.5);
    
    } else if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
        if (EventAbility() == Button.PrimaryFire) {
            SetAbilityCooldown(EventPlayer(), Button.Ability2, AbilityCooldown(EventPlayer(), Button.Ability2)-2);
        } else if (EventAbility() == Button.Ability1) {
            SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 2);
        }

    } else if (HeroOf(EventPlayer()) == Hero.Roadhog && EventAbility() == Button.Ability1) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-5);
        
        if (Ammo(EventPlayer(), 0) < 5) {
            SetAmmo(EventPlayer(), 0, Ammo(EventPlayer(), 0) + 1);
        }
  
    } else if (HeroOf(EventPlayer()) == Hero.Winston) {
        if (PlayersWithinRadius(PositionOf(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces) >= 2) {
            if (PlayersWithinRadius(PositionOf(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces) >= 3) {
                Damage(Victim(), EventPlayer(), EventDamage());
            } else {
                Damage(Victim(), EventPlayer(), EventDamage()*2);
            }
        }
    
    } else if (HeroOf(EventPlayer()) == Hero.Sigma && EventAbility() == Button.PrimaryFire) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 1);
    }
}

rule: "Hero Abilities - Dealt Final Blow"
Event.OnFinalBlow Team.Team1 {
    if (HeroOf(EventPlayer()) == Hero.Mccree && EventWasCriticalHit()) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);

    } else if (HeroOf(EventPlayer()) == Hero.Genji && (EventAbility() == Button.Ability1 || EventAbility() == Button.Melee || EventAbility() == Button.Ultimate)) {
        define blastPosition = PositionOf(Victim());

        Wait(0.75);

        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Green, blastPosition, 7);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Green, blastPosition + Vector(0, 0.75, 0), 7);

        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Green, blastPosition, 200);
        PlayEffect(AllPlayers(), PlayEffect.DvaSelfDestructExplosionSound, Color.Green, blastPosition, 200);

        ApplyImpulse(PlayersWithinRadius(blastPosition, 7, Team.Team2, RadiusLOS.Surfaces), Vector(0, 1, 0), 5, Relative.ToWorld, ContraryMotion.Cancel);

        Damage(PlayersWithinRadius(blastPosition, 7, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 75);
    
    } else if (HeroOf(EventPlayer()) == Hero.Hanzo && EventWasCriticalHit()) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
    
    } else if (HeroOf(EventPlayer()) == Hero.Moira && (EventAbility() == Button.Melee || EventAbility() == Button.Ultimate || EventAbility() == Button.Ability2)) {
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Purple, PositionOf(Victim()), 10);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Purple, PositionOf(Victim()) + Vector(0, 0.75, 0), 10);

        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Purple, PositionOf(Victim()), 200);
        PlayEffect(AllPlayers(), PlayEffect.DvaSelfDestructExplosionSound, Color.Purple, PositionOf(Victim()), 200);

        ApplyImpulse(PlayersWithinRadius(PositionOf(Victim()), 10, Team.Team2, RadiusLOS.Surfaces), Vector(0, 1, 0), 5, Relative.ToWorld, ContraryMotion.Cancel);

        Damage(PlayersWithinRadius(PositionOf(Victim()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 100);

    } else if (HeroOf(EventPlayer()) == Hero.Roadhog) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-2);
    
    } else if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
        if (EventAbility() == Button.Ability1) {
            SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
        }
    }
}

rule: "Hero Abilities - Scored Elimination"
Event.OnFinalBlow Team.Team1 {
    if (HeroOf(EventPlayer()) == Hero.Echo && EventAbility() == Button.SecondaryFire) {
        SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);

    } else if (HeroOf(EventPlayer()) == Hero.WreckingBall) {
        SetAbilityCooldown(EventPlayer(), Button.Crouch, 0);
    }
}

rule: "Hero Abilities - Used Ability 1"
Event.OngoingPlayer Team.Team1 if (IsUsingAbility1(EventPlayer())) {
    if (HeroOf(EventPlayer()) == Hero.Echo) {
        SetStatus(PlayersWithinRadius(PositionOf(EventPlayer()), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 2);

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 12);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 200);

    } else if (HeroOf(EventPlayer()) == Hero.Mercy) {
        ApplyImpulse(EventPlayer(), FacingDirectionOf(EventPlayer()) + Vector(0, 0.25, 0), 17, Relative.ToWorld, ContraryMotion.Cancel);

        SetAbilityCooldown(EventPlayer(), Button.Ability1, 2);
    } else if (HeroOf(EventPlayer()) == Hero.Soldier76) {
        ApplyImpulse(PlayersWithinRadius(PositionOf(EventPlayer()), 1.5, Team.Team2, RadiusLOS.Surfaces), FacingDirectionOf(EventPlayer()) + Vector(0, 0.25, 0), 15, Relative.ToWorld, ContraryMotion.Cancel);

        SetStatus(PlayersWithinRadius(PositionOf(EventPlayer()), 1.5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 0.25);

        Wait(0.016);
        LoopIfConditionIsTrue();
  
    } else if (HeroOf(EventPlayer()) == Hero.Tracer) {
        SetAmmo(EventPlayer(), 0, 40);

        SetStatus(PlayersWithinRadius(PositionOf(EventPlayer()), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 1);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 12);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 200);

        Wait(0.016);

        SetStatus(PlayersWithinRadius(PositionOf(EventPlayer()), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 1);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 12);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 0.75, 0), 200);
    }
}

rule: "Rein - Cancel Charge"
Event.OngoingPlayer Team.Team1 if (HeroOf(EventPlayer()) == Hero.Reinhardt && IsUsingAbility1(EventPlayer()) && !IsButtonHeld(EventPlayer(), Button.Ability1)) {
    WaitUntil(!IsUsingAbility1(EventPlayer()) || IsButtonHeld(EventPlayer(), Button.Ability1), 6);
    CancelPrimaryAction(EventPlayer());
}

rule: "Hero Abilities - Used Melee"
Event.OngoingPlayer Team.Team1 if (IsMeleeing(EventPlayer())) {
    if (HeroOf(EventPlayer()) == Hero.Reaper) {
        if (IsInViewAngle(EventPlayer(), PlayerClosestToReticle(EventPlayer()), 45) && IsInLineOfSight(EventPlayer(), PlayerClosestToReticle(EventPlayer())) && !HasStatus(PlayerClosestToReticle(EventPlayer()), Status.PhasedOut)) {
            ApplyImpulse(PlayerClosestToReticle(EventPlayer()), DirectionTowards(PlayerClosestToReticle(EventPlayer()), EventPlayer()) + Vector(0, 0.25, 0), 17, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
}

rule: "Hero Abilities - Used Primary Fire"
Event.OngoingPlayer Team.Team1 if (IsFiringPrimary(EventPlayer())) {
    if (HeroOf(EventPlayer()) == Hero.Sigma) {
        define sigmaPullLoc = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * DistanceBetween(EyePosition(EventPlayer()), PlayerClosestToReticle(EventPlayer(), Team.Team2)));
        define sigmaPullTargets = PlayersWithinRadius(sigmaPullLoc, 7, Team.Team2, RadiusLOS.Surfaces);

        for (define i = 0; i < CountOf(sigmaPullTargets); i++) {
            ApplyImpulse(sigmaPullTargets[i], DirectionTowards(sigmaPullTargets[i], sigmaPullLoc), 7, Relative.ToWorld, ContraryMotion.Cancel);

            PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Blue, sigmaPullTargets[i], 0.5);
        }
    }
}