import "master.del";

define setHeroPassiveText(Player player) {
    if (HeroOf(player) == Hero.Ana) {
        heroPassiveText = heroPassives.Ana;
    } else if (HeroOf(player) == Hero.Ashe) {
        heroPassiveText = heroPassives.Ashe;
    } else if (HeroOf(player) == Hero.Baptiste) {
        heroPassiveText = heroPassives.Baptiste;
    } else if (HeroOf(player) == Hero.Bastion) {
        heroPassiveText = heroPassives.Bastion;
    } else if (HeroOf(player) == Hero.Brigitte) {
        heroPassiveText = heroPassives.Brigitte;
    } else if (HeroOf(player) == Hero.Doomfist) {
        heroPassiveText = heroPassives.Doomfist;
    } else if (HeroOf(player) == Hero.Dva) {
        heroPassiveText = heroPassives.Dva;
    } else if (HeroOf(player) == Hero.Echo) {
        heroPassiveText = heroPassives.Echo;
    } else if (HeroOf(player) == Hero.Genji) {
        heroPassiveText = heroPassives.Genji;
    }  else if (HeroOf(player) == Hero.Hanzo) {
        heroPassiveText = heroPassives.Hanzo;
    } else if (HeroOf(player) == Hero.Junkrat) {
        heroPassiveText = heroPassives.Junkrat;
    } else if (HeroOf(player) == Hero.Lucio) {
        heroPassiveText = heroPassives.Lucio;
    } else if (HeroOf(player) == Hero.Mccree) {
        heroPassiveText = heroPassives.Mccree;
    } else if (HeroOf(player) == Hero.Mei) {
        heroPassiveText = heroPassives.Mei;
    } else if (HeroOf(player) == Hero.Mercy) {
        heroPassiveText = heroPassives.Mercy;
    } else if (HeroOf(player) == Hero.Moira) {
        heroPassiveText = heroPassives.Moira;
    } else if (HeroOf(player) == Hero.Orisa) {
        heroPassiveText = heroPassives.Orisa;
    } else if (HeroOf(player) == Hero.Pharah) {
        heroPassiveText = heroPassives.Pharah;
    } else if (HeroOf(player) == Hero.Reaper) {
        heroPassiveText = heroPassives.Reaper;
    } else if (HeroOf(player) == Hero.Reinhardt) {
        heroPassiveText = heroPassives.Reinhardt;
    } else if (HeroOf(player) == Hero.Roadhog) {
        heroPassiveText = heroPassives.Roadhog;
    } else if (HeroOf(player) == Hero.Sigma) {
        heroPassiveText = heroPassives.Sigma;
    } else if (HeroOf(player) == Hero.Soldier76) {
        heroPassiveText = heroPassives.Soldier76;
    } else if (HeroOf(player) == Hero.Sombra) {
        heroPassiveText = heroPassives.Sombra;
    } else if (HeroOf(player) == Hero.Symmetra) {
        heroPassiveText = heroPassives.Symmetra;
    } else if (HeroOf(player) == Hero.Torbjorn) {
        heroPassiveText = heroPassives.Torbjorn;
    } else if (HeroOf(player) == Hero.Tracer) {
        heroPassiveText = heroPassives.Tracer;
    } else if (HeroOf(player) == Hero.Widowmaker) {
        heroPassiveText = heroPassives.Widowmaker;
    } else if (HeroOf(player) == Hero.Winston) {
        heroPassiveText = heroPassives.Winston;
    } else if (HeroOf(player) == Hero.WreckingBall) {
        heroPassiveText = heroPassives.WreckingBall;
    } else if (HeroOf(player) == Hero.Zarya) {
        heroPassiveText = heroPassives.Zarya;
    } else if (HeroOf(player) == Hero.Zenyatta) {
        heroPassiveText = heroPassives.Zenyatta;
    }

    return null;
}

enum heroPassives {
    Ana = "Biotic grenade stuns enemies for 4 seconds", // Implemented
    Ashe = "You deal 20% additional damage to targets who are on fire", // Implemented
    Baptiste = "Immortality Field cannot be destroyed by enemies", // Implemented
    Bastion = "Move significantly faster while repairing yourself",
    Brigitte = "Damaging enemies reduces whipshot's cooldown, whipshot knocks over and pulls enemies", // Implemented
    Doomfist = "Damaging an enemy with your abilities or melee refills your handcannon", // Implemented
    Dva = "Damaging enemies reduces your boosters' cooldown", // Implemented
    Echo = "Take decreased damage while airborne",
    Genji = "Damaging an enemy with dash stuns them", // Implemented
    Hanzo = "Sonic arrow stuns enemies", // Implemented
    Junkrat = "Deal more significant knockback to enemies", // Implemented
    Lucio = "Soundwave deals significantly more damage and knocks enemies farther back",
    Mccree = "Killing an enemy with a critical blow refreshes your combat roll",
    Mei = "Icicles breifly freeze enemies",
    Mercy = "Guardian Angel can be activated without a targete teamate to give a small directional boost",
    Moira = "Dealing a final blow to an enemy with a melee attack causes them to explode",
    Orisa = "Fortifying adds 100 rounds to your fusion driver, potentially overloading it",
    Pharah = "Take decreased damage while airborne",
    Reaper = "Meleeing in the direction of an enemy pulls them towards you",
    Reinhardt = "Final blows reduce the cooldown of firestrike",
    Roadhog = "Successfully landing a hook reduces hook's cooldown by 4 seconds",
    Sigma = "Enemies damged by hyperspheres are briefly stunned",
    Soldier76 = "After sprinting, your melee stuns enemies",
    Sombra = "Hacked enemies are disabled", // Implemented
    Symmetra = "Turrets cannot be damaged by enemies",
    Torbjorn = "Your turret cannot be damaged by enemies, deal 200% damage with your hammer while overloaded",
    Tracer = "Blinking very briefly stuns nearby enemies",
    Widowmaker = "Eliminating enemies refills your magazine, headshots briefly stun enemies",
    Winston = "Being surrounded by 3 or more enemies increases your damage",
    WreckingBall = "Eliminating enemies refreshes piledriver",
    Zarya = "Dealing damage reduces the cooldown of personal barrier",
    Zenyatta = "While using trancendence, nearby enemies catch on fire and take significant damge over time"
}

rule: "Hero Abilities - Dealt Damage"
Event.OnDamageDealt Team.Team1 {
    if (HeroOf(EventPlayer()) == Hero.Ana && EventAbility() == Button.Ability2) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 4);
    
    } else if (HeroOf(EventPlayer()) == Hero.Ashe && HasStatus(Victim(), Status.Burning)) {
        Damage(Victim(), EventPlayer(), EventDamage()*0.2);
   
    } else if (HeroOf(EventPlayer()) == Hero.Brigitte) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-1);
        if (EventAbility() == Button.Ability1) {
            SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 1);
            ApplyImpulse(Victim(), DirectionTowards(Victim(), EventPlayer()) + Vector(0, 0.25, 0), 7, Relative.ToWorld, ContraryMotion.Cancel);
        }
  
    } else if (HeroOf(EventPlayer()) == Hero.Doomfist && EventAbility() != Button.PrimaryFire) {
        SetAmmo(EventPlayer(), 0, 4);
    
    } else if (HeroOf(EventPlayer()) == Hero.Dva) {
        SetAbilityCooldown(EventPlayer(), Button.Ability1, AbilityCooldown(EventPlayer(), Button.Ability1)-0.5);

    } else if (HeroOf(EventPlayer()) == Hero.Genji && EventAbility() == Button.Ability1) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 2);

    } else if (HeroOf(EventPlayer()) == Hero.Hanzo && EventAbility() == Button.Ability1) {
        SetStatus(Victim(), EventPlayer(), Status.Stunned, 2);
    
    } else if (HeroOf(EventPlayer()) == Hero.Lucio && EventAbility() == Button.SecondaryFire) {
        Damage(Victim(), EventPlayer(), EventDamage()*8);
    
    } else if (HeroOf(EventPlayer()) == Hero.Mei && EventAbility() == Button.SecondaryFire) {
         SetStatus(Victim(), EventPlayer(), Status.Frozen, 0.5);
    }
}

rule: "Hero Abilities - Dealt Final Blow"
Event.OnFinalBlow Team.Team1 {
    if (HeroOf(EventPlayer()) == Hero.Moira && (EventAbility() == Button.Melee || EventAbility() == Button.Ultimate || EventAbility() == Button.Ability2)) {
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Purple, PositionOf(Victim()), 10);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Purple, PositionOf(Victim()) + Vector(0, 0.75, 0), 10);

        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Purple, PositionOf(Victim()), 200);
        PlayEffect(AllPlayers(), PlayEffect.DvaSelfDestructExplosionSound, Color.Purple, PositionOf(Victim()), 200);

        ApplyImpulse(PlayersWithinRadius(PositionOf(Victim()), 10, Team.Team2, RadiusLOS.Surfaces), Vector(0, 1, 0), 5, Relative.ToWorld, ContraryMotion.Cancel);

        Damage(PlayersWithinRadius(PositionOf(Victim()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 100);
    }
}