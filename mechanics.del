import "master.del";

globalvar define stunNodeLocs = [Vector(-104.41, -999, 50.62), Vector(-97.73, -999, 39.64), Vector(-101.07, -999, 45.13)];
globalvar define stunNodeVisibility = null;
globalvar define stunNodeColor = [];
globalvar define thunderDomeExitButtonLoc = Vector(-11.19, -2.58, 98.46);
globalvar define thunderDomeExitButtonPrompt = "Exit Locked";

rule: "Encounter - Zen Death Handler During Zarya Ult"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zenyatta && zaryaCastingUlt) {
    stunNodeLocs = [Vector(-104.41, 9, 50.62), Vector(-97.73, 9, 39.64), Vector(-101.07, 9, 45.13)];
    stunNodeVisibility = AllPlayers();

    if (RandomInteger(0, 1) == 0) {
        SpawnAI(Vector(-96.4, -2, 40.13), EnemyTypes.LesserBastion);
    } else {
        SpawnAI(Vector(-103.4, -2, 51.7), EnemyTypes.LesserBastion);
    }
}

rule: "Encounter - Victory Trigger"
Event.OnDeath Team.Team2 if (IsDummyBot(EventPlayer()) && HeroOf(EventPlayer()) == Hero.Zarya && !debugModeEnabled) {
    DeclareTeamVictory(Team.Team1);
}

rule: "Encounter - Thunderdome Rein Death Handler"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt && DistanceBetween(EventPlayer(), Vector(-13.7, -3.68, 90.26)) < 20) {
    thunderDomeExitButtonLoc = Vector(-11.19, -2.58, 98.46);
    thunderDomeExitButtonPrompt = "Press F to Exit";
}

rule: "Encounter - Fuel Truck Rein Death Handler"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    Wait(45);
    SpawnAI(Vector(-56.82, -3.16, 71.79), EnemyTypes.Rein);
}


rule: "Encounter - Player Shot Interactions"
Event.OngoingPlayer Team.Team1 if (IsFiringPrimary(EventPlayer()) || IsFiringSecondary(EventPlayer())) {
    // Deactivate stun nodes
    for (define i = 0; i <= CountOf(stunNodeLocs); i++) {
        define playerAimPos = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * DistanceBetween(EyePosition(EventPlayer()), stunNodeLocs[i]));

        if (DistanceBetween(playerAimPos, stunNodeLocs[i]) < 0.75 && DistanceBetween(playerAimPos, stunNodeLocs[i]) != 0 && stunNodeColor[i] == Color.Team2) {
            PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Team1, stunNodeLocs[i], 2);
            PlayEffect(AllPlayers(), PlayEffect.MoiraFadeDisappearSound, Color.Team1, stunNodeLocs[i], 200);
            stunNodeColor[i] = Color.Team1;
        }        

    }

    if (debugModeEnabled) {
        for (define i = 0; i <= CountOf(debugNodes); i++) {
            define playerAimPos = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * DistanceBetween(EyePosition(EventPlayer()), debugNodes[i]));

            if (DistanceBetween(playerAimPos, debugNodes[i]) < 0.25 && DistanceBetween(playerAimPos, debugNodes[i]) != 0 && !ArrayContains(selectedDebugNodes, debugNodes[i])) {
                if (ArrayContains(selectedDebugNodes, debugNodes[i])) {
                    RemoveFromArray(selectedDebugNodes, debugNodes[i]);
                } else {
                    selectedDebugNodes[CountOf(selectedDebugNodes)] = debugNodes[i];
                }
            }
        }
    }

    Wait(0.1);
    LoopIfConditionIsTrue();
}

globalvar define coolerEntryPortal = Vector(-91.4, -1, 26.45);
globalvar define coolerExitPortal = Vector(-109.36, -0.5, 55.25);//Vector(-113.22, -0.5, 49.48);
globalvar define coolerPos = Vector(-135.26, -1.98, 40.74);
globalvar define coolerPower = 0;
globalvar define teleporterPos = Vector(-94.3, -35, 49.24);
globalvar define capturePointPos = Vector(-94.3, -0.76, 49.24);//Vector(-88.89, -1.98, 52.48);
globalvar define capturePointProgress = 0;

globalvar define capPointLoopCount = 0;
rule: "Encounter - Capture Point"
Event.OngoingGlobal {
    define playersFuelingTeleporterCount = 0;
    define playersNearTeleporter = PlayersWithinRadius(capturePointPos, 10.25, Team.Team1, RadiusLOS.Off);

    if (capPointLoopCount > 6) {
        capPointLoopCount = 0;
    } else {
        capPointLoopCount++;
    }

    for (define i = 0; i < CountOf(playersNearTeleporter); i++) {
        playersFuelingTeleporterCount++;
    }

    if (playersFuelingTeleporterCount > 0) { // Build
        if (capturePointProgress <= 100) {
            capturePointProgress += (0.25/CountOf(AllPlayers(Team.Team1))) * playersFuelingTeleporterCount;
        } else {
            stunNodeLocs = [Vector(-104.41, 3.5, 50.62), Vector(-97.73, 3.5, 39.64), Vector(-101.07, 9, 45.13)];
            stunNodeVisibility = AllPlayers();
        }

        if (zaryaAdSummonCooldown > zaryaAdSummonCooldownSetting*0.75) {
            zaryaAdSummonCooldown = zaryaAdSummonCooldownSetting*0.75;
        }
    } else { // No players fueling
        if (!zaryaCastingUlt) {
            stunNodeLocs = [Vector(-104.41, -999, 50.62), Vector(-97.73, -999, 39.64), Vector(-101.07, -999, 45.13)];
            stunNodeVisibility = null;
        }
    }
        
    Wait(0.25);
    Loop();
}

rule: "Encounter - Stun Node Handler"
Event.OngoingGlobal {
    if (ArrayContains(stunNodeColor, Color.Team1)) {
        Wait(2);
        if (!ArrayContains(stunNodeColor, Color.Team2)) {
            for (define i = 0; i < CountOf(stunNodeLocs); i++) {
                PlayEffect(AllPlayers(), PlayEffect.TracerRecallReappearEffect, Color.Team1, stunNodeLocs[i], 2);
                PlayEffect(AllPlayers(), PlayEffect.DebuffImpactSound, Color.Team2, stunNodeLocs[i], 200);
            }

            if (RandomInteger(0, 1) == 0) {
                SpawnAI(Vector(-96.4, -2, 40.13), EnemyTypes.StandardBastion);
            } else {
                SpawnAI(Vector(-103.4, -2, 51.7), EnemyTypes.StandardBastion);
            }
            
            if (zaryaCastingUlt) {
                zaryaCastingUlt = false;
                capturePointProgress = 0;
                Wait(1);
                for (define i = 0; i < CountOf(stunNodeLocs); i++) {
                    PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, Color.Team2, stunNodeLocs[i], 2);
                    PlayEffect(AllPlayers(), PlayEffect.MoiraFadeReappearSound, Color.Team2, stunNodeLocs[i], 200);
                }
                Wait(0.01);
                stunNodeLocs = [Vector(-104.41, -999, 50.62), Vector(-97.73, -999, 39.64), Vector(-101.07, -999, 45.13)];
                stunNodeVisibility = null;
                Wait(3);
                SpawnAI(Vector(-102.3, -2, 43.2), EnemyTypes.StandardTurret);
            } else {
                SetStatus(PlayersOnHero(Hero.Zarya, Team.Team2)[0], null, Status.Stunned, 10);
                ChaseVariableOverTime(teleporterPos, Vector(-94.3, -0.76, 49.24), 1, TimeChaseReevaluation.None);
                Wait(10);
                ChaseVariableOverTime(teleporterPos, Vector(-94.3, -35, 49.24), 1, TimeChaseReevaluation.None);
            }
        }

        for (define i = 0; i < CountOf(stunNodeLocs); i++) {
            stunNodeColor[i] = Team.Team2;
        }

        for (define i = 0; i < CountOf(stunNodeLocs); i++) {
            PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, Color.Team2, stunNodeLocs[i], 2);
            PlayEffect(AllPlayers(), PlayEffect.MoiraFadeReappearSound, Color.Team2, stunNodeLocs[i], 200);
        }
    }
    Wait(0.25);
    Loop();
}

rule: "Encounter - Cooler Portal"
Event.OngoingPlayer {
    if (DistanceBetween(EventPlayer(), coolerEntryPortal) < 3) {
        Teleport(EventPlayer(), coolerExitPortal + Vector(0, -1, 0));
        
        PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, coolerEntryPortal, 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.Team2, coolerEntryPortal, 200);
        PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, coolerExitPortal, 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.Team2, coolerExitPortal, 200);

        WaitUntil(DistanceBetween(EventPlayer(), coolerExitPortal) > 3, 999);

    } else if (DistanceBetween(EventPlayer(), coolerExitPortal) < 3) {
        Teleport(EventPlayer(), coolerEntryPortal + Vector(0, -1, 0));
        
        PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, coolerEntryPortal, 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.Team2, coolerEntryPortal, 200);
        PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, coolerExitPortal, 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.Team2, coolerExitPortal, 200);

        WaitUntil(DistanceBetween(EventPlayer(), coolerEntryPortal) > 3, 999);
    }

    Wait(0.25);
    Loop();
}

rule: "Encounter - Teleporter"
Event.OngoingPlayer Team.Team1 {
    if (DistanceBetween(EventPlayer(), teleporterPos) < 1.25) {
        SmallMessage(EventPlayer(), "Teleporter warming up");

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.SkyBlue, teleporterPos, 200);
        Wait(0.1);
        
        if (DistanceBetween(EventPlayer(), teleporterPos) > 1.25) {
            SmallMessage(EventPlayer(), "Teleporter link broken");
            return;
        }

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.SkyBlue, teleporterPos, 200);
        Wait(0.1);

        if (DistanceBetween(EventPlayer(), teleporterPos) > 1.25) {
            SmallMessage(EventPlayer(), "Teleporter link broken");
            return;
        }

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearSound, Color.SkyBlue, teleporterPos, 200);
        Wait(0.1);

        if (DistanceBetween(EventPlayer(), teleporterPos) < 1.25) {
            thunderDomeExitButtonLoc = Vector(0, -999, 0);
            thunderDomeExitButtonPrompt = "Exit Locked";

            PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
            PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearEffect, Color.Team1, PositionOf(EventPlayer()), 2);
            PlayEffect(AllPlayers(), PlayEffect.BuffImpactSound, Color.SkyBlue, PositionOf(EventPlayer()), 200);
        
            Teleport(EventPlayer(), Vector(-7.77, -3.84, 96.12));
        
            Wait(0.16);
            PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, Color.SkyBlue, PositionOf(EventPlayer()), 200);
            PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
            SmallMessage(EventPlayer(), "Teleported");

            Teleport(PlayersOnHero(Hero.Zarya, Team.Team2)[0], Vector(-12, 1.27, 80));
            StartFacing(PlayersOnHero(Hero.Zarya, Team.Team2)[0], DirectionTowards(EyePosition(PlayersOnHero(Hero.Zarya, Team.Team2)[0]), Vector(-19.37, -3.84, 85.05)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            
            for (define i = 0; i < CountOf(PlayersOnHero(Hero.Reinhardt, Team.Team2)); i++) {
                if (DistanceBetween(PlayersOnHero(Hero.Reinhardt, Team.Team2)[i], Vector(-13.7, -3.68, 90.26)) < 20) {
                    Heal(PlayersOnHero(Hero.Reinhardt, Team.Team2)[i], null, 200);
                    Loop();
                }
            }

            PressButton(PlayersOnHero(Hero.Zarya, Team.Team2)[0], Button.SecondaryFire);
            Wait(0.1);

            SpawnAI(Vector(-19.37, -3.84, 85.05), EnemyTypes.Rein);
        } else {
            SmallMessage(EventPlayer(), "Teleporter link broken");
        }
    }
    Wait(0.25);
    Loop();
}

rule: "Encounter - Thunder Dome Walls - Impulse"
Event.OngoingPlayer if (DistanceBetween(EventPlayer(), Vector(-13.7, -3.68, 90.26)) <= 13 && DistanceBetween(EventPlayer(), Vector(-13.7, -3.68, 90.26)) >= 10) {
    ApplyImpulse(EventPlayer(), DirectionTowards(EventPlayer(), Vector(-13.7, -3.68, 90.26)), 2, Relative.ToWorld, ContraryMotion.Cancel);

    Wait(0.016);
    LoopIfConditionIsTrue();
}

rule: "Encounter - Thunder Dome Exit Terminal"
Event.OngoingPlayer Team.Team1 {
    if (DistanceBetween(EventPlayer(), thunderDomeExitButtonLoc) < 6  && IsButtonHeld(EventPlayer(), Button.Interact)) {
        SpawnAI(Vector(-30.5, 2, 76.6), EnemyTypes.ExploderOmnic);
        SpawnAI(Vector(-33.1, 2, 82.4), EnemyTypes.StandardBastion);
        SpawnAI(Vector(-33.71, 2, 71.89), EnemyTypes.LesserBastion);
        SpawnAI(Vector(-31.24, 1, 62.18), EnemyTypes.LesserBastion);

        Teleport(PlayersWithinRadius(Vector(-13.7, -3.68, 90.26), 12, Team.Team1, RadiusLOS.Off), Vector(-23.45, -2, 61.96));

        Wait(0.016);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearEffect, Color.Team1, PositionOf(EventPlayer()), 2);
        PlayEffect(AllPlayers(), PlayEffect.BuffImpactSound, Color.SkyBlue, PositionOf(EventPlayer()), 200);
    }
    Wait(0.25);
    Loop();
}

rule: "Encounter - Hack Room Enemy Spawn Trigger"
Event.OngoingPlayer Team.Team1 {
    if (DistanceBetween(EventPlayer(), Vector(-30.97, 2, 86.78)) < 6) {
        SpawnAI(Vector(-26.4, 2.3, 90), EnemyTypes.StandardBomber);
        Wait(30);
    }
    Wait(0.25);
    Loop();
}

rule: "Encounter - Hack Terminal Trigger"
Event.OngoingPlayer Team.Team1 {
    if (DistanceBetween(EventPlayer(), Vector(-27.85, 3.1, 84.46)) < 6 && IsButtonHeld(EventPlayer(), Button.Interact)) {
        stunNodeLocs = [Vector(-104.41, -999, 50.62), Vector(-97.73, -999, 39.64), Vector(-101.07, -999, 45.13)];
        stunNodeVisibility = null;

        capturePointProgress = 0;

        ClearStatus(PlayersOnHero(Hero.Zarya, Team.Team2)[0], Status.PhasedOut);
        SmallMessage(AllPlayers(), "The " + HeroIconString(Hero.Zarya) + " Zarya Echo is vulnerable!");
        
        for (define i = 0; i < 3; i++) {
            SpawnAI(zaryaAdSummonLocs[RandomInteger(0, CountOf(zaryaAdSummonLocs)-1)], EnemyTypes.LesserBastion);
        }

        Teleport(EventPlayer(), Vector(-64.67, -1.13, 29.05));
        Teleport(PlayersOnHero(Hero.Zarya, Team.Team2)[0], Vector(-94.3, 2, 49.24));

        Wait(0.016);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearEffect, Color.Team1, PositionOf(EventPlayer()), 2);
        PlayEffect(AllPlayers(), PlayEffect.BuffImpactSound, Color.SkyBlue, PositionOf(EventPlayer()), 200);

        Wait(30);

        SetStatus(PlayersOnHero(Hero.Zarya, Team.Team2)[0], EventPlayer(), Status.PhasedOut, 999999);
        SmallMessage(AllPlayers(), "Zarya Echo's protections return");
        
        zaryaCastingUlt = true;
        SpawnAI(Vector(-102.8, -2, 44), EnemyTypes.ExploderOmnic);


        Teleport(PlayersOnHero(Hero.Zarya, Team.Team2)[0], Vector(-102.8, 2, 44));
        Wait(0.1);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(PlayersOnHero(Hero.Zarya, Team.Team2)[0]) + Vector(0, 1, 0), 15);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearEffect, Color.Team2, PositionOf(PlayersOnHero(Hero.Zarya, Team.Team2)[0]), 2);
        PlayEffect(AllPlayers(), PlayEffect.BuffImpactSound, Color.SkyBlue, PositionOf(PlayersOnHero(Hero.Zarya, Team.Team2)[0]), 200);
    }
    Wait(0.25);
    Loop();
}

// rule: "Prevent Zarya Health Regeneration"
// Event.OnDamageTaken Team.Team2 {
//     if (HeroOf(EventPlayer()) == Hero.Zarya) {
//         SetMaxHealth(EventPlayer(), Health(EventPlayer()));

//     }
// }

// Tutorial
// rule: "Tutorial - Enter Trigger"
// Event.OngoingPlayer Team.Team1 {
//     if (DistanceBetween(EventPlayer(), Vector(-110.7, 0, 33.47)) < 6 && IsButtonHeld(EventPlayer(), Button.Interact)) {
//         Teleport(EventPlayer(), Vector(-41.69, 2, 42.15));
//         Wait(0.5);
//         Teleport(EventPlayer(), Vector(-41.69, 2, 42.15));

//         healthPickupLocs[CountOf(healthPickupLocs)] = Vector(-40.51, 2, 35.9);
//         CreateEffect(AllPlayers(), Effect.Orb, Color.Black, healthPickupLocs[CountOf(healthPickupLocs)-1], 0.5, EffectRev.PositionAndRadius);
//         Wait(0.016);
//         healthPickupEffects[CountOf(healthPickupLocs)-1] = LastCreatedEntity();
//     }
//     Wait(0.25);
//     Loop();
// }

// rule: "Tutorial - Exit Trigger"
// Event.OngoingPlayer Team.Team1 {
//     if (DistanceBetween(EventPlayer(), Vector(-36.3, 3.5, 27.46)) < 6 && IsButtonHeld(EventPlayer(), Button.Interact)) {
//         Kill(EventPlayer(), null);
//     }
//     Wait(0.25);
//     Loop();
// }

// globalvar define randomEnemyTypes = [EnemyTypes.LesserBastion, EnemyTypes.StandardBastion, EnemyTypes.GreaterBastion, EnemyTypes.StandardBomber, EnemyTypes.LesserTurret, EnemyTypes.StandardTurret, EnemyTypes.LesserOmnic, EnemyTypes.ExploderOmnic];
// rule: "Tutorial - Enemy Tree"
// Event.OngoingPlayer Team.Team1 {
//     if (DistanceBetween(EventPlayer(), Vector(-35.9, -3.5, 14.11)) < 6 && IsButtonHeld(EventPlayer(), Button.Interact)) {
//         SpawnAI(Vector(-32.8, -5, 7), randomEnemyTypes[RandomInteger(0, CountOf(randomEnemyTypes)-1)]);
//     }
//     Wait(0.25);
//     Loop();
// }