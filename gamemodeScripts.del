import "master.del";

//  ------------- Gamemode Setup -------------
rule: "Gamemode - Init"
Event.OngoingGlobal
if (IsAssemblingHeroes()) {
    CreateHudText(AllPlayers(), null, null, " ", Location.Top, 1,  Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(AllPlayers(), null, null, " ", Location.Top, 1,  Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(AllPlayers(), null, null, " ", Location.Top, 1,  Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(AllPlayers(), null, null, " ", Location.Top, 1,  Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(AllPlayers(), null, null, " ", Location.Top, 1,  Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    
    // CreateHudText(AllPlayers(), null, null, "Iris Charge Held " + playerChargeHeld + "%", Location.Top, 999,  Color.SkyBlue, Color.SkyBlue, Color.SkyBlue, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);

    WorkshopSettingCombo("Settings", "Difficulty Scaling", 0, ["Enabled", "Disabled"], 0);
    SetMatchTime(0);
    Wait(1);
    SetMatchTime(0);
    DisableCompletion();
    Wait(1);
    PauseMatchTime(); 
    DisableAnnouncer();
    DisableMusic();

    Wait(3);
}

globalvar define encounterSpawnLocationSets = [
    // Street outside the fountain
    [
        Vector(28, 4, 42),
        Vector(27, 4, 45),
        Vector(28, 4, 38),
        Vector(18, 2.8, 34),
        Vector(18, 2.8, 47)
    ],
    // Fountain entrance walkway
    [
        Vector(62, 7, 21),
        Vector(67, 7, 20),
        Vector(69, 6.75, 10),
        Vector(69, 6.75, 10),
        Vector(55, 6.75, 7)
    ]
];
globalvar define encounterWaypointLocations = [
    Vector(19, 5, 40), // Street outside the fountain
    Vector(64, 6.75, 12) // Street outside the fountain
];

globalvar define encounterCompositions = [
    [
        EnemyTypes.Rein,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion
    ],
    [
        EnemyTypes.Rein,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic
    ],
    [
        EnemyTypes.GreaterBastion,
        EnemyTypes.LesserRein,
        EnemyTypes.LesserRein,
        EnemyTypes.LesserRein,
        EnemyTypes.LesserRein
    ],
    [
        EnemyTypes.GreaterBastion,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic,
        EnemyTypes.LesserOmnic
    ],
    [
        EnemyTypes.GreaterBastion,
        EnemyTypes.LesserExploderOmnic,
        EnemyTypes.LesserExploderOmnic,
        EnemyTypes.LesserExploderOmnic,
        EnemyTypes.LesserExploderOmnic
    ],
    [
        EnemyTypes.GreaterBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion,
        EnemyTypes.LesserBastion
    ],
    [
        EnemyTypes.Omnic,
        EnemyTypes.StandardBastion,
        EnemyTypes.StandardBastion,
        EnemyTypes.StandardBastion,
        EnemyTypes.StandardBastion
    ]
];
globalvar define currentEnemyEncounterLocation = -1;
globalvar define currentEnemyEncounterComposition = -1;
rule: "Gamemode - Spawn Enemy Encounter"
Event.OngoingGlobal
if (IsAssemblingHeroes()) {
    // Select Random Encounter Location
    currentEnemyEncounterLocation = RandomInteger(0, CountOf(encounterSpawnLocationSets)-1);
    currentEnemyEncounterComposition = RandomInteger(0, CountOf(encounterCompositions)-1);
    
    currentEncounterWaypointPos = encounterWaypointLocations[currentEnemyEncounterLocation];

    // Spawn enemies for the current composition at the current location
    for (define i = 0; i < CountOf(encounterCompositions[currentEnemyEncounterComposition])-1; i++) {
        SpawnAI(encounterSpawnLocationSets[currentEnemyEncounterLocation][RandomInteger(0, CountOf(encounterSpawnLocationSets[currentEnemyEncounterLocation])-1)], encounterCompositions[currentEnemyEncounterComposition][i], "Encounter " + currentEnemyEncounterLocation);
    }
    
    WaitUntil(CountOf(AllLivingPlayers(Team.Team2)) > 1, 999999);
    WaitUntil(CountOf(AllLivingPlayers(Team.Team2)) < 1, 999999);

    Loop();
}

//  ------------- Player Scripts -------------
playervar define heroPerkText = "";
playervar define heroKillPerkText = "";
playervar define heroUltPerkText = "";
playervar define heroUltChargeText = "";
rule: "Gamemode - Setup Player Hud"
Event.OngoingPlayer Team.Team1 {
    // Ability Descriptions
    CreateHudText(EventPlayer(), "", "Abilities:" + IsInAlternateForm(EventPlayer()), "", Location.Left, 1, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    setHeroPassiveText(EventPlayer());
    CreateHudText(EventPlayer(), "", "", heroPerkText, Location.Left, 2, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(EventPlayer(), "", "", heroKillPerkText, Location.Left, 3, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(EventPlayer(), "", "", heroUltPerkText, Location.Left, 4, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // New Line
    CreateHudText(EventPlayer(), "", "", " ", Location.Left, 7, Color.
    Orange, Color.Orange, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // Zarya Health Display
    // CreateHudText(EventPlayer(), "", "Zarya Health", "", Location.Left, 8, Color.Purple, Color.Purple, Color.Purple, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(EventPlayer(), "", "", Health(PlayersOnHero(Hero.Zarya)[0]), Location.Left, 9, Color.Purple, Color.Purple, Color.Purple, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    DisableGameModeHud(EventPlayer());
    DisableGameModeInworldUI(EventPlayer());
}

rule: "Gamemode - Respawn Player"
Event.OngoingPlayer if (!IsDummyBot(EventPlayer()) && HasSpawned(EventPlayer()) && !IsDead(EventPlayer())) {
    setHeroPassiveText(EventPlayer());

    StartFacing(EventPlayer(), Vector(-55.92, -2, 40.67), 999999, Relative.ToWorld, FacingRev.None);
    Wait(0.016);
    StopFacing(EventPlayer());

    if (CountOf(playerEffects) != 0) {
        DestroyEffect(playerEffects);
        playerVisualEffectLoc = Vector(0, -999, 0);
        playerEffects = [];
    }
}

rule: "Gamemode - Player Exits Spawn Room"
Event.OngoingPlayer Team.Team1 if (IsInSpawnRoom(EventPlayer())) {
    WaitUntil(!IsInSpawnRoom(EventPlayer()), 9999999);

    // Teleport(EventPlayer(), Vector(16, 4, 88.5));

    // StartFacing(EventPlayer(), DirectionTowards(Vector(6, -5, 29.37), Vector(-12, -6,)), 999999, Relative.ToWorld, FacingRev.None);
    Wait(0.016);
    // StopFacing(EventPlayer());

    setHeroPassiveText(EventPlayer());
}

//  ------------- Walls -------------
globalvar define wallLocs = [/*
    // Vector(-59, 0, 41.31), Vector(-60.33, 0, 43.36), Vector(-58, 0, 39.84), // Right B Entrance
    Vector(-86.5, -4, 75.16), 
    Vector(-83.17, -2, 77.12), // Left Section Walls
    Vector(-72.28, -1.98, 51.47),
    Vector(-72.83, -2.98, 69.18),
    Vector(-76.95, -2.96, 76.85),
    Vector(-75.71, -3.48, 74.16),
    Vector(-71.10, -2.95, 72.89),
    Vector(-73.06, -2.96, 71.74),
    Vector(-92.18, -3.98, 72.77),
    Vector(-97.17, -3.98, 69.44),
    Vector(-110.15, -3.98, 66.38),
    Vector(-108.66, -3.98, 66.83),
    Vector(-107.19, -3.98, 67.10),
    Vector(-105.25, -3.98, 67.00),
    Vector(-103.38, -3.98, 66.89),
    Vector(-101.54, -3.98, 66.85),
    Vector(-65.40, 2.52, 50.42),
    Vector(-66.47, 2.52, 52.10),
    Vector(-67.59, 2.52, 53.79),
    Vector(-79.72, 2.02, 81.5),
    Vector(-27.45, -3.33, 67.67),
    Vector(-26.22, -3.30, 77.17),
    Vector(-102.39, -1.99, 22.18),
    Vector(-101.39, -1.98, 20.34),
    Vector(-100.37, -1.98, 18.64),
    Vector(-104.66, -1.98, 45.22),
    Vector(-103.62, -1.98, 43.50),
    Vector(-102.55, -1.98, 41.88),
    Vector(-127.84, -0.98, 37.04),
    Vector(-106.74, 2.02, 50.77),
    Vector(-111.01, 2.02, 65.20),
    Vector(-92.84, -2.48, 23.84),
    Vector(-55.69, -3, 52.46),
    Vector(-56.99, -3, 50.96),
    Vector(-55.69, -3, 52.46),
    Vector(-58.56, -3, 48.69),
    Vector(-50.96, -3, 48.57),

    // Portal Backing Walls    
    Vector(-93.83, -2.48, 25.37),
    Vector(-94.73, -2.48, 26.79),
    Vector(-110.42, -1.86, 48.84),
    Vector(-111.86, -1.86, 47.94),
    Vector(-113.15, -1.86, 47.20),
    Vector(-114.28, -1.86, 46.58),

    // Tutorial walls
    Vector(-35.32, 0, 46.31),
    Vector(-31.8, 0, 27.4),
    Vector(-28.88, 0, 8),
    Vector(-28.9, 0, 5.8),

    // Stairs walls
    Vector(-27.37, -2.73, 65.72),
    Vector(-28.04, -3.65, 70.08),
    Vector(-28.27, -3.67, 73.12),
    Vector(-28.08, -3.62, 76.44),
    Vector(-32.52, 2.02, 94.98),
    Vector(-38.73, 2.02, 94.51),
    Vector(-31.66, -4.05, 102.69),
    Vector(-24.75, -4.05, 87.21),
    Vector(-24.90, -4.04, 89.33),
    Vector(-40.91, -3.16, 74.15),
    Vector(-24.71, -4.04, 91.82),
    Vector(-40.91, -3.16, 74.15),
    Vector(-40.91, -3.16, 74.15),
    Vector(-40.91, -3.16, 74.15),
    Vector(-40.91, -3.16, 74.15),
    Vector(-40.91, -3.16, 74.15),
    Vector(-19.88, -2.16, 61.47)
*/];


globalvar define currentEncounterWaypointPos = Vector(10, 10, 10);
rule: "Gamemode - Create Walls and effects"
Event.OngoingGlobal {
    // Teleporter (I think)
    // CreateEffect(AllPlayers(), Effect.LightShaft, Color.SkyBlue, teleporterPos + Vector(0, -3, 0), 1.25, EffectRev.VisibleToPositionRadiusAndColor);

    // Capture Point
    // CreateProgressBarInWorldText(AllPlayers(), capturePointProgress, "Power", capturePointPos + Vector(0, 4, 0), 1, Clipping.ClipAgainstSurfaces, Color.SkyBlue, Color.SkyBlue, ProgressBarWorldEvaluation.VisibleToPositionAndValues, Spectators.DefaultVisibility);
    // CreateProgressBarHudText(PlayersWithinRadius(capturePointPos, 10.25, Team.Team1, RadiusLOS.Off), capturePointProgress, "Power", Location.Top, 4, Color.SkyBlue, Color.SkyBlue, ProgressBarHudEvaluation.VisibleToAndValues, Spectators.DefaultVisibility);

    // CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue, capturePointPos, 10, EffectRev.VisibleToPositionRadiusAndColor);
    // CreateEffect(AllPlayers(), Effect.LightShaft, Color.SkyBlue, capturePointPos + Vector(0, -27, 0), 10, EffectRev.VisibleToPositionRadiusAndColor);
    // CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue, capturePointPos, 10 * (capturePointProgress/100), EffectRev.VisibleToPositionRadiusAndColor);

    // Cooler Portals (Entry, Exit, Decoy Exit)
    // CreateEffect(AllPlayers(), Effect.GoodAura, Color.Team2, coolerEntryPortal, 1.5, EffectRev.VisibleToPositionRadiusAndColor);
    // CreateEffect(AllPlayers(), Effect.BadAura, Color.Team2, coolerEntryPortal, 1.5, EffectRev.VisibleToPositionRadiusAndColor);

    // CreateEffect(AllPlayers(), Effect.GoodAura, Color.Team2, coolerExitPortal, 1.5, EffectRev.VisibleToPositionRadiusAndColor);
    // CreateEffect(AllPlayers(), Effect.BadAura, Color.Team2, coolerExitPortal, 1.5, EffectRev.VisibleToPositionRadiusAndColor);

    // Jump Pad
    CreateEffect(AllPlayers(), Effect.Ring, Color.Green, jumpPadPos, 2, EffectRev.VisibleToPositionRadiusAndColor);

    // Spawn Room Text
    CreateInWorldText(AllPlayers(), "Please message me with your thoughts!", Vector(-122.7, 1, 31), 1.5, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
    CreateInWorldText(AllPlayers(), "My Discord is Trexus#9575", Vector(-122.7, 0.5, 31), 1.5, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
    CreateInWorldText(AllPlayers(), "Also check out my game 'Mirastell' on steam!", Vector(-122.7, 0, 31), 1.5, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);

    CreateIcon(AllPlayers(), currentEncounterWaypointPos, Icon.Skull, IconRev.Position, Color.Team2, true);
}

// playervar define collidingWallPos = null;
/*rule: "Wall Collision - Detect Collision"
Event.OngoingPlayer Team.Team1 {
    collidingWallPos = null;

    for (define i = 0; i < CountOf(wallLocs); i++) {
        if (DistanceBetween(Vector(XOf(wallLocs[i]), YOf(PositionOf(EventPlayer())), ZOf(wallLocs[i])), PositionOf(EventPlayer())) < 3) {
            collidingWallPos = wallLocs[i];
        }
    }

    Wait(0.1);
    Loop();
}

rule: "Wall Collision - Apply Impulse"
Event.OngoingPlayer Team.Team1 {
    if (collidingWallPos != null) {
        define pushLocation = Vector(XOf(collidingWallPos), YOf(PositionOf(EventPlayer())), ZOf(collidingWallPos));
        ApplyImpulse(EventPlayer(), DirectionTowards(pushLocation, EventPlayer()), 1.5, Relative.ToWorld, ContraryMotion.Cancel);
    }

    Wait(0.016);
    Loop();
}*/

// playervar define damageText = [];
// rule: "Create Damage Text"
// Event.OnDamageDealt Team.Team1 {
//     if (EventWasCriticalHit()) {
//         CreateInWorldText(EventPlayer(), EventDamage(), PositionOf(Victim()) + Vector(RandomReal(-1, 1), RandomReal(-1, 1), RandomReal(-1, 1)), 1, Clipping.DoNotClip, InworldTextRev.None, Color.Yellow, Spectators.DefaultVisibility);
//     } else {
//         CreateInWorldText(EventPlayer(), EventDamage(), PositionOf(Victim()) + Vector(RandomReal(-1, 1), RandomReal(-1, 1), RandomReal(-1, 1)), 1, Clipping.DoNotClip, InworldTextRev.None, Color.White, Spectators.DefaultVisibility);
//     }

//     InsertValueInArray(damageText, 0, LastTextID());
// }

// rule: "Destroy Damage Text"
// Event.OngoingPlayer Team.Team1 if (CountOf(damageText) > 0) {
//     Wait(2);
//     DestroyInWorldText(damageText[CountOf(damageText)]);
//     RemoveFromArrayAtIndex(damageText, CountOf(damageText));
//     LogToInspector("Destroying Text");
//     LoopIfConditionIsTrue();
// }