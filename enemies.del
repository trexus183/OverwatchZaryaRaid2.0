import "master.del";

// Enemy Types
enum EnemyTypes {
    LesserBastion,
    StandardBastion,
    GreaterBastion,
    StandardBomber,
    LesserTurret,
    StandardTurret,
    LesserOmnic,
    ExploderOmnic,
    Zarya,
    Rein
}
playervar define type = null;
globalvar define reinBot = null;
globalvar define spawnIndex = 0;
define SpawnAI(Vector spawnLoc, EnemyTypes enemyType) {
    if (debugModeEnabled) {
        Abort();
    }

    CreateDummyBot(Hero.Ana, Team.Team2, -1, Vector(-4.8, -7, -11.8), Vector(0, 0, 0));

    // if (CountOf(PlayersOnHero(Hero.Ana, Team.Team2)) == 0) {
    //     SmallMessage(AllPlayers(), "No unused bots avaliable to spawn new enemy");
    //     Abort();
    // }

    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, spawnLoc + Vector(0, 1, 0), 5);
    PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionSound, Color.Team2, spawnLoc, 200);

    if (spawnIndex >= CountOf(PlayersOnHero(Hero.Ana))) {
        spawnIndex = 0;
    }
    // define targetBot = PlayersOnHero(Hero.Ana, Team.Team2)[spawnIndex];
    define targetBot = LastCreatedEntity();
    spawnIndex++;

    if (targetBot == reinBot) {
        reinBot = null;
    }

    ClearStatus(targetBot, Status.Burning);
    EnableMovementCollisionWithEnvironment(targetBot);
    EnableMovementCollisionWithPlayers(targetBot);
    SetGravity(targetBot, 100);
    StopForcingHero(targetBot);
    SetDamageDealt(targetBot, 100);
    SetJumpVerticalSpeed(targetBot, 100);
    SetMoveSpeed(targetBot, 100);
    StopScalingPlayer(targetBot);
    StopAllDamageOverTime(targetBot);
    SetProjectileGravity(targetBot, 0);
    SetProjectileSpeed(targetBot, 300);
    SetMaxAmmo(targetBot, 1, 1);
    SetMaxHealth(targetBot, 100);
    SetAbilityCooldown(targetBot, Button.Ability1, 0);
    SetAbility1Enabled(targetBot, true);
    SetAbility2Enabled(targetBot, true);
    AllowButton(targetBot, Button.PrimaryFire);
    Wait(0.1);
    
    if (enemyType == EnemyTypes.LesserBastion) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Lesser Scout");
        SetDamageDealt(targetBot, 4);
        SetMaxHealth(targetBot, 45);
        SetAbility1Enabled(targetBot, false);
        StartScalingPlayer(targetBot, 0.75, false);

    } else if (enemyType == EnemyTypes.StandardBastion) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Scout Bastion");
        SetDamageDealt(targetBot, 12);
        SetMaxHealth(targetBot, 75);
        SetAbility1Enabled(targetBot, false);
        StartScalingPlayer(targetBot, 1, false);

    } else if (enemyType == EnemyTypes.GreaterBastion) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Greater Scout");
        SetDamageDealt(targetBot, 25);
        StartScalingPlayer(targetBot, 1.25, false);
        SetAbility1Enabled(targetBot, false);

    } else if (enemyType == EnemyTypes.LesserTurret) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Lesser Turret");
        SetDamageDealt(targetBot, 20);
        SetMaxHealth(targetBot, 40);
        StartScalingPlayer(targetBot, 1.25, false);

    } else if (enemyType == EnemyTypes.StandardTurret) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Turret Bastion");
        SetDamageDealt(targetBot, 25);
        SetMaxHealth(targetBot, 65);
        StartScalingPlayer(targetBot, 1.5, false);

    } else if (enemyType == EnemyTypes.StandardBomber) {
        ForcePlayerHero(targetBot, Hero.Bastion);
        StartForcingDummyBotName(targetBot, "Bomber");
        SetMaxHealth(targetBot, 1);
        SetUltimateCharge(targetBot, 100);
        SetUltimateAbilityEnabled(targetBot, true);
        SetAbility1Enabled(targetBot, false);
        SetJumpVerticalSpeed(targetBot, 300);
        SetDamageDealt(targetBot, 25);
        StartScalingPlayer(targetBot, 0.6, false);
        Wait(0.1);
        PressButton(targetBot, Button.Ultimate);

    } else if (enemyType == EnemyTypes.ExploderOmnic) {
        ForcePlayerHero(targetBot, Hero.Zenyatta);
        StartForcingDummyBotName(targetBot, "Exploder Omnic");
        DisallowButton(targetBot, Button.PrimaryFire);
        SetMaxHealth(targetBot, 250);
        SetMoveSpeed(targetBot, 150);
        StartScalingPlayer(targetBot, 1.25, false);

    } else if (enemyType == EnemyTypes.LesserOmnic) {
        ForcePlayerHero(targetBot, Hero.Zenyatta);
        StartForcingDummyBotName(targetBot, "Lesser Exploder");
        SetDamageDealt(targetBot, 75);
        DisallowButton(targetBot, Button.PrimaryFire);
        SetMaxHealth(targetBot, 40);
        SetMoveSpeed(targetBot, 150);
        StartScalingPlayer(targetBot, 0.75, false);

    } else if (enemyType == EnemyTypes.Zarya) {
        CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team2, targetBot, 1, EffectRev.None);
        ForcePlayerHero(targetBot, Hero.Zarya);
        SetMaxHealth(targetBot, 1500);
        SetDamageDealt(targetBot, 50);
        SetMoveSpeed(targetBot, 0);
        SetStatus(PlayersOnHero(Hero.Zarya, Team.Team2)[0], targetBot, Status.PhasedOut, 999999);
        StartForcingDummyBotName(targetBot, "Zarya Echo");
        StartScalingPlayer(targetBot, 3, false);

    } else if (enemyType == EnemyTypes.Rein) {
        SetMaxHealth(targetBot, 250);
        SetDamageDealt(targetBot, 50);
        ForcePlayerHero(targetBot, Hero.Reinhardt);
        StartForcingDummyBotName(targetBot, "Rein Echo");
        StartScalingPlayer(targetBot, 1.25, false);
        SetMoveSpeed(targetBot, 70);
        reinBot = targetBot;
    }
    
    PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, Color.Team2, spawnLoc, 3);
    updateEnemyDamageReceived(targetBot);
    
    Wait(0.1);
    Teleport(targetBot, spawnLoc);
    
    return null; 
}

// Enemy AI
define updateEnemyDamageReceived(define enemy) {
    define numPlayers = CountOf(AllPlayers(Team.Team1))-1;

    if (HeroOf(enemy) == Hero.Bastion) {
        SetDamageReceived(enemy, 100 - (10 * (numPlayers)));
    } else if (HeroOf(enemy) == Hero.Zenyatta) {
        SetDamageReceived(enemy, 100 - (0 * (numPlayers)));
    } else if (HeroOf(enemy) == Hero.Reinhardt) {
        SetDamageReceived(enemy, 100 - (0 * (numPlayers)));
    } else if (HeroOf(enemy) == Hero.Zarya) {
        SetDamageReceived(enemy, 100 - (25 * (numPlayers)));
    }

    return null;
}

define updatePlayerDamageReceived() {
    define numPlayers = CountOf(AllPlayers(Team.Team1))-1;

    SetDamageReceived(AllPlayers(Team.Team1), 100 + (15 * (numPlayers)));

    return null;
}

rule: "Update Stats Based on Player Count"
Event.OnPlayerJoin Team.Team1 {    
    for (define i = 0; i < CountOf(AllPlayers(Team.Team2)); i++) {
        updateEnemyDamageReceived(AllPlayers(Team.Team2)[i]);
    }

    updatePlayerDamageReceived();
    Wait(1);
    Loop();
}

// rule: "Setup Health Text"
// Event.OngoingPlayer Team.Team2 {
//     CreateInWorldText(AllPlayers(), Health(EventPlayer()) + ' / ' + MaxHealth(EventPlayer()), EyePosition(EventPlayer()) + Vector(0, 0.25, 0), 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionStringAndColor, Color.Black, Spectators.DefaultVisibility);
// }

globalvar define healthPickupLocs = [];
globalvar define healthPickupEffects = [];
rule: "Enemy Death Handler"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) != Hero.Ana) {
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Team2, EyePosition(EventPlayer()), 1.5);
    if (EventWasCriticalHit()) {
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.White, EyePosition(EventPlayer()), 2.25);
    }
    Wait(0.1);

    if (debugModeEnabled) {
        Abort();
    }

    if (RandomReal(0, 1) <= 0.5) {
        define pickupIndex = CountOf(healthPickupLocs);
        healthPickupLocs[pickupIndex] = PositionOf(EventPlayer());
        CreateEffect(AllPlayers(), Effect.Orb, Color.Black, healthPickupLocs[pickupIndex], 0.5, EffectRev.PositionAndRadius);
        Wait(0.1);
        healthPickupEffects[pickupIndex] = LastCreatedEntity();
    }

    Wait(1);

    DestroyDummyBot(EventPlayer());

    // ForcePlayerHero(EventPlayer(), Hero.Ana);
    // StopForcingThrottle(EventPlayer());
    // StopThrottleInDirection(EventPlayer());
    // StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    // StopHoldingButton(EventPlayer(), Button.SecondaryFire);
    // StopFacing(EventPlayer());
    // DisableMovementCollisionWithEnvironment(EventPlayer());
    // DisableMovementCollisionWithPlayers(EventPlayer());
    // SetGravity(EventPlayer(), 0);
    // ClearStatus(EventPlayer(), Status.Burning);
    // StopAllDamageOverTime(EventPlayer());
}

// rule: "Force Anas Into Spawn-Room"
// Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Ana && !IsInSpawnRoom(EventPlayer())) {
//     Teleport(EventPlayer(), Vector(-4.8, -7, -11.8));
// }

playervar define targetPlayer = null;
playervar define pathDestination = null;
rule: "Enemy Targeting AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) != Hero.Ana) {
    if (targetPlayer == null) {
        define players = RandomizedArray(AllPlayers(Team.Team1));

        for (define i = 0; i < CountOf(players); i++) {
            if (IsInLineOfSight(EventPlayer(), players[i], BarrierLOS.NoBarriersBlock)) {
                if (!(HeroOf(players[i]) == Hero.Sombra && IsUsingAbility1(players[i]))) {
                    targetPlayer = players[i];
                    Wait(aiTickDelaySetting);
                    LoopIfConditionIsTrue();
                }
            }
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Enemy Path Finding AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) != Hero.Zarya && HeroOf(EventPlayer()) != Hero.Ana) {
    if (pathDestination == null || (DistanceBetween(EventPlayer(), pathDestination) < 1.5 && targetPlayer == null)) {
        define currentPathNodeId = IndexOfArrayValue(pathNodes, pathDestination);

        if (currentPathNodeId == -1) {
            for (define i = 0; i < CountOf(pathNodes); i++) {
                if (IsInLineOfSight(EyePosition(EventPlayer()), pathNodes[i], BarrierLOS.NoBarriersBlock)) {
                    currentPathNodeId = i;
                    break;
                }
            }
        }

        StopFacing(EventPlayer());
        StopForcingThrottle(EventPlayer());
        
        Wait(1);

        if (pathDestination == null || (DistanceBetween(EventPlayer(), pathDestination) < 1.5 && targetPlayer == null)) {
            define randPathNodeConnection = RandomInteger(0, CountOf(pathNodeConnections[currentPathNodeId]));
            pathDestination = pathNodes[pathNodeConnections[currentPathNodeId][randPathNodeConnection]];

            StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), pathDestination), 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            
            StartThrottleInDirection(EventPlayer(), DirectionTowards(PositionOf(EventPlayer()), pathDestination), 0.5, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Bastion Enemy AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Bastion) {
    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
        // AI for Bombers
        if (MaxHealth(EventPlayer()) < 10) {
            StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)) + Vector(RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05)), 999999, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            Wait(1);
            ApplyImpulse(EventPlayer(), Vector(0, 1, 0), 17, Relative.ToPlayer, ContraryMotion.Cancel);
            Wait(1.25);
            PressButton(EventPlayer(), Button.PrimaryFire);
            Wait(0.1);
            Damage(EventPlayer(), EventPlayer(), 100);
        }

        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)) + Vector(RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        pathDestination = PositionOf(targetPlayer);

        if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
            PressButton(EventPlayer(), Button.Ability1);
            Wait(0.5);
            StartHoldingButton(EventPlayer(), Button.PrimaryFire);
        }
    } else {
        if (IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
            StopHoldingButton(EventPlayer(), Button.PrimaryFire);
            PressButton(EventPlayer(), Button.Ability1);
        }

        targetPlayer = null;
    }

    if (pathDestination != null) {
        if (RandomInteger(0, 1) == 0) {
            if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) > 7 || pathDestination != PositionOf(targetPlayer)) {
                StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
            } else if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 4 || pathDestination != PositionOf(targetPlayer)) {
                StartThrottleInDirection(EventPlayer(), DirectionTowards(pathDestination, EventPlayer()), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);

                if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 3) {
                    PressButton(EventPlayer(), Button.Melee);
                }
            } else {
                StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 0, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
            }
        } else {
            StartThrottleInDirection(EventPlayer(), Vector(0, 0, 1), 0, Relative.ToPlayer, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.None);
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}


rule: "Zen Enemy AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zenyatta) {
    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock) && IsAlive(EventPlayer())) {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        pathDestination = PositionOf(targetPlayer);

        if (targetPlayer != null && DistanceBetween(EventPlayer(), targetPlayer) < 5 && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
            SetStatus(EventPlayer(), null, Status.Burning, 5);
            PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
            PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);
            
            StartThrottleInDirection(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 0.5, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        
            PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
            PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

            Wait(1);
            if (!IsAlive(EventPlayer())) {
                Wait(0.1);
                LoopIfConditionIsTrue();
            }

            PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
            PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

            Wait(1);
            if (!IsAlive(EventPlayer())) {
                Wait(0.1);
                LoopIfConditionIsTrue();
            }

            PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
            PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);
            
            Wait(0.5);
            if (!IsAlive(EventPlayer())) {
                Wait(0.1);
                LoopIfConditionIsTrue();
            }
            
            PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
            PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

            Wait(0.5);
            if (!IsAlive(EventPlayer())) {
                Wait(0.1);
                LoopIfConditionIsTrue();
            }

            PlayEffect(AllPlayers(), PlayEffect.JunkratRipTireExplosionEffect, Color.Team2, PositionOf(EventPlayer()), 2);
            PlayEffect(AllPlayers(), PlayEffect.JunkratRipTireExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);

            define explosionTargets = PlayersWithinRadius(PositionOf(EventPlayer()), 6, Team.Team1, RadiusLOS.Surfaces);

            for (define i = 0; i < CountOf(explosionTargets); i++) {
                Damage(explosionTargets[i], EventPlayer(), (MaxHealth(explosionTargets[i])/3));
                ApplyImpulse(explosionTargets[i], DirectionTowards(EventPlayer(), explosionTargets[i]) + Vector(0, 0.25, 0), (DistanceBetween(EventPlayer(), explosionTargets[i])/6) * 35, Relative.ToWorld, ContraryMotion.Cancel);
            }
            
            Kill(EventPlayer());
        }
    } else {
        targetPlayer = null;
    }

    if (pathDestination != null) {
        StartThrottleInDirection(EventPlayer(), DirectionTowards(PositionOf(EventPlayer()), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}
rule: "Zen Death Handler During Zarya Ult"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zenyatta && zaryaCastingUlt) {
    stunNodeLocs = [Vector(-104.41, 9, 50.62), Vector(-97.73, 9, 39.64), Vector(-101.07, 9, 45.13)];

    if (RandomInteger(0, 1) == 0) {
        SpawnAI(Vector(-96.4, -2, 40.13), EnemyTypes.LesserBastion);
    } else {
        SpawnAI(Vector(-103.4, -2, 51.7), EnemyTypes.LesserBastion);
    }
}

globalvar define zaryaBomberSummonCooldownSetting = WorkshopSettingReal("Difficulty Settings", "Boss Summon Cooldown - Bomber (Seconds)", 1, 0, 60, 0);
globalvar define zaryaAdSummonCooldownSetting = WorkshopSettingReal("Difficulty Settings", "Boss Summon Cooldown - Ads (Seconds)", 1.5, 0, 10, 0);
globalvar define zaryaBeamRangeSetting = WorkshopSettingReal("Difficulty Settings", "zarya Beam Attack Range", 25, 0, 100, 0);
globalvar define zaryaBeamChargeSetting = WorkshopSettingInteger("Difficulty Settings", "Zarya Beam Attack Ammo", 200, 0, 1000, 0);
globalvar define aiTickDelaySetting = 1 / WorkshopSettingReal("Performance Settings", "AI Tick Rate", 10,
0.1, 60, 0);
globalvar define debugModeEnabled = false;
globalvar define zaryaBeamCharge = 200;
globalvar define zaryaBeamVolume = 250;
globalvar define zaryaFiringBeam = false;
globalvar define zaryaBomberSummonCooldown = zaryaBomberSummonCooldownSetting;
globalvar define zaryaAdSummonCooldown = zaryaAdSummonCooldownSetting;
globalvar define zaryaAdSummonLocs = [
    Vector(-103.46, -0.98, 57.68),
    Vector(-101.21, -0.98, 50.95),
    Vector(-96.29, -0.98, 42.34),
    Vector(-88.72, -2.5, 36.95),
    Vector(-91.04, -0.98, 50.91),
    Vector(-107.30, -1.48, 41.29),
    Vector(-86.38, -0.98, 47.50),
    Vector(-92.27, -0.98, 56.89),
    Vector(-72.44, -1.48, 40.52)
];
globalvar define zaryaAdSummonComps = [
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserOmnic],
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.LesserOmnic, EnemyTypes.LesserOmnic, EnemyTypes.LesserOmnic, EnemyTypes.LesserOmnic],
    [EnemyTypes.LesserBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.StandardBastion, EnemyTypes.StandardBastion],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserOmnic, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.LesserBastion, EnemyTypes.ExploderOmnic],
    [EnemyTypes.LesserOmnic, EnemyTypes.ExploderOmnic],
    [EnemyTypes.LesserTurret, EnemyTypes.LesserBastion],
    [EnemyTypes.LesserTurret, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardTurret]
];

globalvar define pathNodes = [
    // Main Area (0 - 15)
    Vector(-85.75, -0.98, 54.15),
    Vector(-87.93, -0.98, 57.71),
    Vector(-83.79, -0.98, 50.41),
    Vector(-89.56, -0.98, 45.36),
    Vector(-98.31, -0.98, 45.62),
    Vector(-98.24, -0.98, 54.07),
    Vector(-79.24, -0.98, 56.92),
    Vector(-71.04, -0.98, 57.07),
    Vector(-73.82, -0.89, 62.01),
    Vector(-78.25, -0.98, 67.75),
    Vector(-77.37, -0.98, 47.99),
    Vector(-68.95, -1.48, 35.44),
    Vector(-74.48, -1.48, 33.13),
    Vector(-86.49, -0.98, 63.70),
    Vector(-97.01, -2.98, 66.18),
    Vector(-89.86, -2.98, 69.28),

    // Spawn guard area (16 - 17)
    Vector(-63.69, -1.48, 42.41),
    Vector(-61.27, -1.48, 39.46)
];

globalvar define pathNodeConnections = [
    // Main Area (0 - 15)
    [1, 2, 3, 5, 6, 13],
    [0, 3, 5, 9, 13],
    [3, 5, 6, 7, 8, 13],
    [0, 1, 2, 4],
    [3, 5],
    [0, 1, 2, 4],
    [0, 1, 2, 7, 8, 10],
    [0, 2, 6, 8, 9],
    [6, 7, 9],
    [1, 8],
    [0, 1, 6, 8, 9, 13, 15],
    [10, 12],
    [11],
    [0, 1, 2, 10, 3],
    [15],
    [13, 14]

    // Spawn guard area (16 - 17)
    [17],
    [16]
];

globalvar define zaryaCastingUlt = false;
rule: "Zarya Enemy AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zarya) {
    if (debugModeEnabled) {
        Abort();
    }

    if (DistanceBetween(EventPlayer(), Vector(-13.7, -3.68, 90.26)) < 20) {
        zaryaBeamVolume = 0;
        zaryaBeamCoords = [Vector(0, -999, 0), Vector(0, -999, 0)];
        Wait(6);
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)+ Vector(0, -0.25, 0)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    }

    if (zaryaCastingUlt) {
        StopFacing(EventPlayer());
        Wait(0.1);
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), Vector(-87.6, -2, 53.4)), 999999, Relative.ToPlayer, FacingRev.None);

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, PositionOf(targetPlayer) + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.SymmetraTeleporterReappearEffect, Color.Team2, PositionOf(targetPlayer), 2);
        PlayEffect(AllPlayers(), PlayEffect.BuffImpactSound, Color.Team2, PositionOf(targetPlayer), 200);
        Teleport(targetPlayer, Vector(-87.6, -2, 53.4));

        Wait(0.016);

        PlayEffect(targetPlayer, PlayEffect.BuffImpactSound, Color.Team2, PositionOf(targetPlayer), 200);
        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, PositionOf(targetPlayer) + Vector(0, 1, 0), 5);

        while (zaryaCastingUlt) {
            StartHoldingButton(EventPlayer(), Button.Ultimate);
            Wait(0.64);
            StopHoldingButton(EventPlayer(), Button.Ultimate);
            SetUltimateCharge(EventPlayer(), 100);
            Wait(3);
        }
    }

    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock) && ArrayContains(stunNodeColor, Color.Team2)) {

        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)+ Vector(0, -0.25, 0)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        if (DistanceBetween(EventPlayer(), targetPlayer) < zaryaBeamRangeSetting) {
            zaryaFiringBeam = true;
        } else if (DistanceBetween(EventPlayer(), targetPlayer) > 15) {
            zaryaFiringBeam = false;
            zaryaBeamCoords = [Vector(0, -999, 0), Vector(0, -999, 0)];
            zaryaBeamVolume = 0;
        }

        if (zaryaFiringBeam) {
            // Push beam
            zaryaBeamCoords = [EyePosition(EventPlayer()), PositionOf(targetPlayer)];
            StartDamageOverTime(targetPlayer, EventPlayer(), aiTickDelaySetting, 2 * aiTickDelaySetting);
            ApplyImpulse(targetPlayer, DirectionTowards(EyePosition(EventPlayer()), targetPlayer), 1.5 * aiTickDelaySetting, Relative.ToWorld, ContraryMotion.Cancel);
            zaryaBeamVolume = 250;
            zaryaBeamCharge--;

            // Reload
            if (zaryaBeamCharge == 0) {
                zaryaBeamVolume = 0;
                zaryaBeamCoords = [Vector(0, -999, 0), Vector(0, -999, 0)];
                PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, EyePosition(EventPlayer()), 20);
                Wait(1.75);
                PlayEffect(AllPlayers(), PlayEffect.BrigitteRepairPackImpactEffect, Color.Team2, EyePosition(EventPlayer()), 20);
                Wait(0.25);
                zaryaBeamCharge = zaryaBeamChargeSetting;
            }
        }

        if (zaryaBomberSummonCooldown <= 0) {
            zaryaBomberSummonCooldown = zaryaBomberSummonCooldownSetting;
            PressButton(EventPlayer(), Button.SecondaryFire);
            Wait(0.1);
            define spawnPos = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer())*500, AllPlayers(), EventPlayer(), true);
            SpawnAI(spawnPos, EnemyTypes.StandardBomber);
        } else {
            zaryaBomberSummonCooldown = zaryaBomberSummonCooldown - aiTickDelaySetting;
        }

        if (zaryaAdSummonCooldown <= 0) {
            zaryaBeamVolume = 0;
            zaryaBeamCoords = [Vector(0, -999, 0), Vector(0, -999, 0)];
            Wait(1);
            PressButton(EventPlayer(), Button.Melee);

            define randEncounter = RandomInteger(0, CountOf(zaryaAdSummonComps) - 1);

            for (define i = 0; i < CountOf(zaryaAdSummonComps[randEncounter]); i++) {
                SpawnAI(zaryaAdSummonLocs[RandomInteger(0, CountOf(zaryaAdSummonLocs)-1)], zaryaAdSummonComps[randEncounter][i]);
            }

            Wait(1);

            // Cooldown is normal during DPS phase and is essentially disabled until the turret dies outside of it
            if (HasStatus(EventPlayer(), Status.PhasedOut)) {
                zaryaAdSummonCooldown = zaryaAdSummonCooldownSetting;
            } else {
                zaryaAdSummonCooldown = zaryaAdSummonCooldownSetting*10;
            }
        } else {
            zaryaAdSummonCooldown = zaryaAdSummonCooldown - aiTickDelaySetting;
        }
    } else {
        targetPlayer = null;

        StopHoldingButton(EventPlayer());
        StopFacing(EventPlayer());
        zaryaBeamCoords = [Vector(0, -999, 0), Vector(0, -999, 0)];
        zaryaBeamVolume = 0;
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Victory Trigger"
Event.OnDeath Team.Team2 if (IsDummyBot(EventPlayer()) && HeroOf(EventPlayer()) == Hero.Zarya && !debugModeEnabled) {
    DeclareTeamVictory(Team.Team1);
}

rule: "Rein Enemy AI"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire) && DistanceBetween(targetPlayer, EventPlayer()) < 7) {
        StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    } else {
        StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    }

    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), targetPlayer), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        
        // ForceThrottle(EventPlayer(), 1, 1, 0, 0, 0, 0);
    } else {
        targetPlayer = null;

        StopHoldingButton(EventPlayer());
        StopFacing(EventPlayer());
        StartThrottleInDirection(EventPlayer(), Vector(0, 0, 1), 0, Relative.ToPlayer, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.None);
        // StopForcingThrottle(EventPlayer());
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Rein Enemy Boop"
Event.OnDamageDealt Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    ApplyImpulse(Victim(), Vector(0, 0.25, -1), 25, Relative.ToPlayer, ContraryMotion.Cancel);
}

rule: "Rein Death Handler"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    thunderDomeExitButtonLoc = Vector(-11.19, -2.58, 98.46);
    thunderDomeExitButtonPrompt = "Press F to Exit";
}