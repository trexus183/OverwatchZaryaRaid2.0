import "master.del";

// Enemy Types
enum EnemyTypes {
    LesserBastion = "LesserBastion",
    StandardBastion = "StandardBastion",
    GreaterBastion = "GreaterBastion",
    LesserTurret = "LesserTurret",
    StandardTurret = "StandardTurret",
    LesserOmnic = "LesserOmnic",
    Omnic = "Omnic",
    LesserExploderOmnic = "LesserExploderOmnic",
    ExploderOmnic = "ExploderOmnic",
    Zarya = "Zarya",
    ReinBoss = "ReinBoss",
    Rein = "Rein",
    LesserRein = "LesserRein"
}
playervar define type = null;
// globalvar define reinBot = null;
globalvar define spawnIndex = 0;

globalvar define enemySpawnQueue = [];

playervar define enemyMechanicEffect = null;
playervar define enemyVisualEffect = null;

playervar define enemyTypeName = null;

rule: "Game Logic - Process Enemy Spawn Queue"
Event.OngoingGlobal {
    if (CountOf(enemySpawnQueue) > 0) {
        define spawnLoc = enemySpawnQueue[0][0];
        define enemyType = enemySpawnQueue[0][1];

        enemySpawnQueue = RemoveFromArrayAtIndex(enemySpawnQueue, 0);
        // ModifyVariable(enemySpawnQueue, Operation.RemoveFromArrayByIndex, 0);

        CreateDummyBot(Hero.Ana, Team.Team2, -1, Vector(-4.8, -7, -11.8), Vector(0, 0, 0));
        define targetBot = LastCreatedEntity();

        PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, spawnLoc + Vector(0, 1, 0), 5);
        PlayEffect(AllPlayers(), PlayEffect.EchoStickyBombExplosionSound, Color.Team2, spawnLoc, 200);

        if (spawnIndex >= CountOf(PlayersOnHero(Hero.Ana))) {
            spawnIndex = 0;
        }
        
        spawnIndex++;

        ClearStatus(targetBot, Status.Burning);
        EnableMovementCollisionWithEnvironment(targetBot);
        EnableMovementCollisionWithPlayers(targetBot);
        SetGravity(targetBot, 100);
        StopForcingHero(targetBot);
        SetDamageDealt(targetBot, 100);
        SetJumpVerticalSpeed(targetBot, 100);
        SetMoveSpeed(targetBot, 100);
        StopScalingPlayer(targetBot);
        StopAllDamageOverTime(targetBot);
        SetProjectileGravity(targetBot, 100);
        SetProjectileSpeed(targetBot, 100);
        SetMaxAmmo(targetBot, 1, 1);
        SetMaxHealth(targetBot, 100);
        SetAbilityCooldown(targetBot, Button.Ability1, 0);
        SetAbility1Enabled(targetBot, true);
        SetAbility2Enabled(targetBot, true);
        AllowButton(targetBot, Button.PrimaryFire);
        Wait(0.1);
        
        targetBot.enemyTypeName = enemyType;
        
        if (enemyType == EnemyTypes.LesserBastion) {
            ForcePlayerHero(targetBot, Hero.Bastion);
            StartForcingDummyBotName(targetBot, "Lesser Scout");
            SetDamageDealt(targetBot, 4);
            SetMaxHealth(targetBot, 45);
            SetAbility1Enabled(targetBot, false);
            StartScalingPlayer(targetBot, 0.75, false);

        } else if (enemyType == EnemyTypes.StandardBastion) {
            ForcePlayerHero(targetBot, Hero.Bastion);
            StartForcingDummyBotName(targetBot, "Scout Bastion");
            SetDamageDealt(targetBot, 12);
            SetMaxHealth(targetBot, 75);
            SetAbility1Enabled(targetBot, false);
            StartScalingPlayer(targetBot, 1, false);

        } else if (enemyType == EnemyTypes.GreaterBastion) {
            ForcePlayerHero(targetBot, Hero.Bastion);
            StartForcingDummyBotName(targetBot, "Greater Scout");
            SetDamageDealt(targetBot, 25);
            StartScalingPlayer(targetBot, 1.25, false);
            SetAbility1Enabled(targetBot, false);

        } else if (enemyType == EnemyTypes.LesserTurret) {
            ForcePlayerHero(targetBot, Hero.Bastion);
            StartForcingDummyBotName(targetBot, "Lesser Turret");
            SetDamageDealt(targetBot, 15);
            SetMaxHealth(targetBot, 33);
            StartScalingPlayer(targetBot, 1.25, false);

        } else if (enemyType == EnemyTypes.StandardTurret) {
            ForcePlayerHero(targetBot, Hero.Bastion);
            StartForcingDummyBotName(targetBot, "Turret Bastion");
            SetDamageDealt(targetBot, 20);
            SetMaxHealth(targetBot, 65);
            StartScalingPlayer(targetBot, 1.5, false);

        } else if (enemyType == EnemyTypes.LesserExploderOmnic) {
            ForcePlayerHero(targetBot, Hero.Zenyatta);
            StartForcingDummyBotName(targetBot, "Lesser Exploder Omnic");
            DisallowButton(targetBot, Button.PrimaryFire);
            DisallowButton(targetBot, Button.SecondaryFire);
            SetMaxHealth(targetBot, 40);
            SetMoveSpeed(targetBot, 150);
            StartScalingPlayer(targetBot, 0.67, false);
            SetStatus(targetBot, null, Status.Burning, 999);

        } else if (enemyType == EnemyTypes.ExploderOmnic) {
            ForcePlayerHero(targetBot, Hero.Zenyatta);
            StartForcingDummyBotName(targetBot, "Exploder Omnic");
            DisallowButton(targetBot, Button.PrimaryFire);
            DisallowButton(targetBot, Button.SecondaryFire);
            SetMaxHealth(targetBot, 220);
            SetMoveSpeed(targetBot, 150);
            StartScalingPlayer(targetBot, 1.35, false);
            SetStatus(targetBot, null, Status.Burning, 999);

        } else if (enemyType == EnemyTypes.LesserOmnic) {
            ForcePlayerHero(targetBot, Hero.Zenyatta);
            StartForcingDummyBotName(targetBot, "Lesser Omnic");
            SetDamageDealt(targetBot, 15);
            SetProjectileSpeed(targetBot, 50);
            SetMaxHealth(targetBot, 67);
            SetMoveSpeed(targetBot, 150);
            StartScalingPlayer(targetBot, 0.75, false);

        } else if (enemyType == EnemyTypes.Omnic) {
            ForcePlayerHero(targetBot, Hero.Zenyatta);
            StartForcingDummyBotName(targetBot, "Omnic");
            SetDamageDealt(targetBot, 25);
            SetProjectileSpeed(targetBot, 75);
            SetMaxHealth(targetBot, 100);
            SetMoveSpeed(targetBot, 150);
            StartScalingPlayer(targetBot, 1.1, false);


        } else if (enemyType == EnemyTypes.Zarya) {
            ForcePlayerHero(targetBot, Hero.Zarya);
            SetMaxHealth(targetBot, 1500);
            SetDamageDealt(targetBot, 75);
            SetMoveSpeed(targetBot, 0);
            SetProjectileGravity(targetBot, 0);
            SetProjectileSpeed(targetBot, 200);
            SetStatus(PlayersOnHero(Hero.Zarya, Team.Team2)[0], targetBot, Status.PhasedOut, 999999);
            StartForcingDummyBotName(targetBot, "Zarya Echo");
            StartScalingPlayer(targetBot, 3, false);

            CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team2, targetBot, 1, EffectRev.VisibleTo);
            targetBot.enemyVisualEffect = LastCreatedEntity();

        } else if (enemyType == EnemyTypes.ReinBoss) {
            SetMaxHealth(targetBot, 250);
            SetDamageDealt(targetBot, 50);
            ForcePlayerHero(targetBot, Hero.Reinhardt);
            StartForcingDummyBotName(targetBot, "Supreme Rein Echo");
            StartScalingPlayer(targetBot, 1.25, false);
            SetMoveSpeed(targetBot, 70);
            SetAbilityCooldown(targetBot, Button.Ability1, 5);
            SetAbilityCooldown(targetBot, Button.Ability2, 2);

            CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team2, targetBot, 1, EffectRev.VisibleTo);
            targetBot.enemyVisualEffect = LastCreatedEntity();
    
        } else if (enemyType == EnemyTypes.Rein) {
            SetMaxHealth(targetBot, 50);
            SetDamageDealt(targetBot, 30);
            ForcePlayerHero(targetBot, Hero.Reinhardt);
            StartForcingDummyBotName(targetBot, "Greater Rein Echo");
            StartScalingPlayer(targetBot, 0.85, false);
            SetMoveSpeed(targetBot, 70);
            SetAbilityCooldown(targetBot, Button.Ability1, 5);
            SetAbilityCooldown(targetBot, Button.Ability2, 2);

            CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team2, targetBot, 1, EffectRev.VisibleTo);
            targetBot.enemyVisualEffect = LastCreatedEntity();
        } else if (enemyType == EnemyTypes.LesserRein) {
            SetMaxHealth(targetBot, 5);
            SetDamageDealt(targetBot, 10);
            ForcePlayerHero(targetBot, Hero.Reinhardt);
            StartForcingDummyBotName(targetBot, "Lesser Rein Echo");
            StartScalingPlayer(targetBot, 0.5, false);
            SetMoveSpeed(targetBot, 120);
            SetAbility1Enabled(targetBot, false);
            SetAbility2Enabled(targetBot, false);
            SetAbilityCooldown(targetBot, Button.Ability1, 999999);

            CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team2, targetBot, 1, EffectRev.VisibleTo);
            targetBot.enemyVisualEffect = LastCreatedEntity();
        }
        
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, Color.Team2, spawnLoc, 3);
        updateEnemyDamageReceived(targetBot);
        
        // Wait(0.1);
        Teleport(targetBot, spawnLoc);
    }

    Wait(0.016);
    Loop();
}

define SpawnAI(Vector spawnLoc, EnemyTypes enemyType) {
    if (debugModeEnabled) {
        Abort();
    }

    enemySpawnQueue[CountOf(enemySpawnQueue)] = [spawnLoc, enemyType];
    
    return null; 
}

// Enemy AI
define updateEnemyDamageReceived(define enemy) {
    define numPlayers = CountOf(AllPlayers(Team.Team1));

    if (HeroOf(enemy) == Hero.Bastion) {
        SetDamageReceived(enemy, 100 - (10 * (numPlayers - 1)));
    } else if (HeroOf(enemy) == Hero.Zenyatta) {
        SetDamageReceived(enemy, 100 - (0 * (numPlayers - 1)));
    } else if (HeroOf(enemy) == Hero.Reinhardt) {
        SetDamageReceived(enemy, 100 - (0 * (numPlayers - 1)));
    } else if (HeroOf(enemy) == Hero.Zarya) {
        SetDamageReceived(enemy, 100 - (25 * (numPlayers - 1)));
    }

    return null;
}

define updatePlayerDamageReceived() {
    define numPlayers = CountOf(AllPlayers(Team.Team1));

    SetDamageReceived(AllPlayers(Team.Team1), 100 + (15 * (numPlayers - 1)));

    return null;
}

rule: "Update Stats Based on Player Count"
Event.OnPlayerJoin Team.Team1 {    
    for (define i = 0; i < CountOf(AllPlayers(Team.Team2)); i++) {
        updateEnemyDamageReceived(AllPlayers(Team.Team2)[i]);
    }

    updatePlayerDamageReceived();
    Wait(1);
    Loop();
}

globalvar define healthPickupLocs = [];
globalvar define healthPickupEffects = [];
rule: "Enemy AI - Death Handler"
Event.OnDeath Team.Team2 if (HeroOf(EventPlayer()) != Hero.Ana) {
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Team2, EyePosition(EventPlayer()), 1.5);
    if (EventWasCriticalHit()) {
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.White, EyePosition(EventPlayer()), 2.25);
    }

    Wait(0.1);

    DestroyDummyBot(EventPlayer());
    DestroyEffect(EventPlayer().enemyMechanicEffect);
    DestroyEffect(EventPlayer().enemyVisualEffect);
}

playervar define targetPlayer = null;
playervar define pathDestination = null;
rule: "Enemy AI - Target Selection"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) != Hero.Ana) {
    if (targetPlayer == null) {
        define players = RandomizedArray(AllPlayers(Team.Team1));

        for (define i = 0; i < CountOf(players); i++) {
            if (IsInLineOfSight(EventPlayer(), players[i], BarrierLOS.NoBarriersBlock)) {
                if (!(HeroOf(players[i]) == Hero.Sombra && IsUsingAbility1(players[i]))) {
                    targetPlayer = players[i];
                    Wait(aiTickDelaySetting);
                    LoopIfConditionIsTrue();
                }
            }
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Enemy AI - Bastion enemies"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Bastion) {
    // Scout Bastions
    if (enemyTypeName == EnemyTypes.LesserBastion || enemyTypeName == EnemyTypes.StandardBastion || enemyTypeName == EnemyTypes.GreaterBastion) {
        if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
            StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)) + Vector(RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05), RandomReal(-0.05, 0.05)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

            pathDestination = PositionOf(targetPlayer);

            if (enemyTypeName != EnemyTypes.LesserBastion  && RandomInteger(1, 10) == 10) {
                PressButton(EventPlayer(), Button.SecondaryFire);
            }

            if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                Wait(0.5);
                StartHoldingButton(EventPlayer(), Button.PrimaryFire);
            }
        } else {
            if (IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                StopHoldingButton(EventPlayer(), Button.PrimaryFire);
            }

            targetPlayer = null;
        }

        if (pathDestination != null) {
            if (RandomInteger(0, 1) == 0) {
                if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) > 7 || targetPlayer == null) {
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
                } else if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 4) {
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(pathDestination, EventPlayer()), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);

                    if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 3) {
                        PressButton(EventPlayer(), Button.Melee);
                    }
                } else {
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 0, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
                }
            } else {
                StartThrottleInDirection(EventPlayer(), Vector(0, 0, 1), 0, Relative.ToPlayer, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.None);
            }
        }
    }

    // Turret Bastions
    if (enemyTypeName == EnemyTypes.LesserTurret || enemyTypeName == EnemyTypes.StandardTurret) {

        if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
        // AI for Bombers
            StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)) + Vector(RandomReal(-0.15, 0.15), RandomReal(-0.15, 0.15), RandomReal(-0.15, 0.15)), 50, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

            pathDestination = PositionOf(targetPlayer);

            if (!IsInAlternateForm()) {
                SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
                PressButton(EventPlayer(), Button.Ability1);
            }
            
            if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                Wait(0.5);
                StartHoldingButton(EventPlayer(), Button.PrimaryFire);
            }
        } else {
            if (IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                StopHoldingButton(EventPlayer(), Button.PrimaryFire);
            }

            targetPlayer = null;
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}


rule: "Enemy AI - Zen"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zenyatta) {
    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock) && IsAlive(EventPlayer())) {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        pathDestination = PositionOf(targetPlayer);

        if (enemyTypeName == EnemyTypes.ExploderOmnic || enemyTypeName == EnemyTypes.LesserExploderOmnic) {
            if (targetPlayer != null && DistanceBetween(EventPlayer(), targetPlayer) < 5 && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
                PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);
                
                StartThrottleInDirection(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 0.5, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
            
                PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

                Wait(1);
                if (!IsAlive(EventPlayer())) {
                    Wait(0.1);
                    LoopIfConditionIsTrue();
                }

                PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

                Wait(1);
                if (!IsAlive(EventPlayer())) {
                    Wait(0.1);
                    LoopIfConditionIsTrue();
                }

                PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);
                
                Wait(0.5);
                if (!IsAlive(EventPlayer())) {
                    Wait(0.1);
                    LoopIfConditionIsTrue();
                }
                
                PlayEffect(AllPlayers(), PlayEffect.WidowmakerVenomMineExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);
                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Team2, PositionOf(EventPlayer()), 2);

                Wait(0.5);
                if (!IsAlive(EventPlayer())) {
                    Wait(0.1);
                    LoopIfConditionIsTrue();
                }

                PlayEffect(AllPlayers(), PlayEffect.JunkratRipTireExplosionEffect, Color.Team2, PositionOf(EventPlayer()), 2);
                PlayEffect(AllPlayers(), PlayEffect.JunkratRipTireExplosionSound, Color.Team2, PositionOf(EventPlayer()), 100);

                define explosionTargets = PlayersWithinRadius(PositionOf(EventPlayer()), 6, Team.Team1, RadiusLOS.SurfacesAndEnemyBarriers);

                for (define i = 0; i < CountOf(explosionTargets); i++) {
                    Damage(explosionTargets[i], EventPlayer(), (MaxHealth(explosionTargets[i])/3));
                    ApplyImpulse(explosionTargets[i], DirectionTowards(EventPlayer(), explosionTargets[i]) + Vector(0, 0.25, 0), (DistanceBetween(EventPlayer(), explosionTargets[i])/6) * 35, Relative.ToWorld, ContraryMotion.Cancel);
                }
                
                Kill(EventPlayer());
            }

            if (pathDestination != null) {
                StartThrottleInDirection(EventPlayer(), DirectionTowards(PositionOf(EventPlayer()), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
            }
        } else {
            if (RandomReal(0, 1) < 0.05) {
                StopHoldingButton(EventPlayer(), Button.PrimaryFire);
                StartHoldingButton(EventPlayer(), Button.SecondaryFire);
                Wait(3);
                StopHoldingButton(EventPlayer(), Button.SecondaryFire);
            } else if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                Wait(0.5);
                StartHoldingButton(EventPlayer(), Button.PrimaryFire);
            }
            
            if (pathDestination != null ) {
                if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) >= 12 || targetPlayer == null) {
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
                } else if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 6) {
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(pathDestination, EventPlayer()), 0.3, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
                } else {
                    StartThrottleInDirection(EventPlayer(), Vector(0, 0, 0), 0, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
                }
            }
        }
    } else {
        targetPlayer = null;

        if (pathDestination != null ) {
            StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}


globalvar define zaryaBomberSummonCooldownSetting = WorkshopSettingReal("Difficulty Settings", "Boss Summon Cooldown - Bomber (Seconds)", 2.5, 0, 30, 0);
globalvar define zaryaAdSummonCooldownSetting = WorkshopSettingReal("Difficulty Settings", "Boss Summon Cooldown - Ads (Seconds)", 4.5, 0, 20, 0);
globalvar define aiTickDelaySetting = 1 / WorkshopSettingReal("Performance Settings", "AI Tick Rate", 10,
0.1, 60, 0);
globalvar define debugModeEnabled = false;
globalvar define zaryaFiringBeam = false;
globalvar define zaryaBomberSummonCooldown = zaryaBomberSummonCooldownSetting;
globalvar define zaryaAdSummonCooldown = zaryaAdSummonCooldownSetting;
globalvar define zaryaAdSummonLocs = [
    Vector(-103.46, -0.98, 57.68),
    Vector(-101.21, -0.98, 50.95),
    Vector(-96.29, -0.98, 42.34),
    Vector(-88.72, -2.5, 36.95),
    Vector(-91.04, -0.98, 50.91),
    Vector(-107.30, -1.48, 41.29),
    Vector(-86.38, -0.98, 47.50),
    Vector(-92.27, -0.98, 56.89),
    Vector(-72.44, -1.48, 40.52)
];
globalvar define zaryaAdSummonComps = [
    [EnemyTypes.Rein, EnemyTypes.LesserBastion],
    [EnemyTypes.Rein, EnemyTypes.LesserTurret],
    [EnemyTypes.Rein, EnemyTypes.LesserOmnic],
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserRein],
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserOmnic],
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserExploderOmnic],
    [EnemyTypes.GreaterBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.LesserBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.StandardBastion, EnemyTypes.StandardBastion],
    [EnemyTypes.Omnic, EnemyTypes.StandardBastion],
    [EnemyTypes.Omnic, EnemyTypes.LesserRein],
    [EnemyTypes.Omnic, EnemyTypes.LesserBastion],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserOmnic, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserOmnic, EnemyTypes.LesserExploderOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserExploderOmnic],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserBastion],
    [EnemyTypes.StandardBastion, EnemyTypes.LesserBastion, EnemyTypes.LesserRein],
    [EnemyTypes.LesserBastion, EnemyTypes.ExploderOmnic],
    [EnemyTypes.LesserOmnic, EnemyTypes.ExploderOmnic],
    [EnemyTypes.LesserTurret, EnemyTypes.LesserBastion],
    [EnemyTypes.LesserTurret, EnemyTypes.LesserOmnic],
    [EnemyTypes.StandardTurret]
];

globalvar define zaryaCastingUlt = false;
rule: "Enemy AI - Zarya"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Zarya) {
    if (debugModeEnabled) {
        Abort();
    }

    if (DistanceBetween(EventPlayer(), Vector(-13.7, -3.68, 90.26)) < 20) {
        Wait(6);
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)+ Vector(0, -0.25, 0)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    }

    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock) && ArrayContains(stunNodeColor, Color.Team2)) {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)+ Vector(0, -0.25, 0)), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        PressButton(EventPlayer(), Button.SecondaryFire);

    } else {
        targetPlayer = null;

        StopHoldingButton(EventPlayer());
        StopFacing(EventPlayer());
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}



rule: "Enemy AI - Rein"
Event.OngoingPlayer Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire) && DistanceBetween(targetPlayer, EventPlayer()) < 7) {
        Wait(0.5);
        StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    } else {
        StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    }

    if (targetPlayer != null && IsInLineOfSight(EventPlayer(), targetPlayer, BarrierLOS.NoBarriersBlock)) {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(targetPlayer)), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

        pathDestination = PositionOf(targetPlayer);

        if (AbilityCooldown(EventPlayer(), Button.Ability1) == 0) {
            PressButton(EventPlayer(), Button.Ability1);
            SetAbilityCooldown(EventPlayer(), Button.Ability2, 3);
        }
        
        PressButton(EventPlayer(), Button.Ability2);
    } else {
        targetPlayer = null;

        StopHoldingButton(EventPlayer());
    }

    if (pathDestination != null) {
        if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) >= 2 || targetPlayer == null) {
            StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), pathDestination), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        } else if (DistanceBetween(PositionOf(EventPlayer()), pathDestination) < 2) {
            StartThrottleInDirection(EventPlayer(), DirectionTowards(pathDestination, EventPlayer()), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
        }
    }

    Wait(aiTickDelaySetting);
    LoopIfConditionIsTrue();
}

rule: "Enemy AI - Rein Impulse On Hit"
Event.OnDamageDealt Team.Team2 if (HeroOf(EventPlayer()) == Hero.Reinhardt) {
    ApplyImpulse(Victim(), Vector(0, 0.25, -1), 25, Relative.ToPlayer, ContraryMotion.Cancel);
}

